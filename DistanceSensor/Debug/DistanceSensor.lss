
DistanceSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001690  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d8  2000000c  0000169c  0002000c  2**2
                  ALLOC
  3 .stack        00000404  200000e4  00001774  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021cdf  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f1f  00000000  00000000  00041d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004206  00000000  00000000  00045c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000590  00000000  00000000  00049e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000578  00000000  00000000  0004a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015c7c  00000000  00000000  0004a999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d7d2  00000000  00000000  00060615  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069d65  00000000  00000000  0006dde7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c54  00000000  00000000  000d7b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 04 00 20 f5 11 00 00 f1 11 00 00 f1 11 00 00     ... ............
	...
      2c:	f1 11 00 00 00 00 00 00 00 00 00 00 f1 11 00 00     ................
      3c:	f1 11 00 00 f1 11 00 00 f1 11 00 00 f1 11 00 00     ................
      4c:	f1 11 00 00 a1 04 00 00 f1 11 00 00 f1 11 00 00     ................
      5c:	00 00 00 00 f1 11 00 00 f1 11 00 00 f1 11 00 00     ................
      6c:	00 00 00 00 f1 11 00 00 31 0b 00 00 41 0b 00 00     ........1...A...
      7c:	f1 11 00 00 f1 11 00 00 45 02 00 00 f1 11 00 00     ........E.......

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	00001690 	.word	0x00001690

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	00001690 	.word	0x00001690
      e4:	00001690 	.word	0x00001690
      e8:	00000000 	.word	0x00000000

000000ec <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
      ec:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
      ee:	79d8      	ldrb	r0, [r3, #7]
      f0:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
      f2:	4770      	bx	lr

000000f4 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
      f4:	2300      	movs	r3, #0
      f6:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
      f8:	2201      	movs	r2, #1
      fa:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
      fc:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
      fe:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
     100:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
     102:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     104:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
     106:	4770      	bx	lr

00000108 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     108:	b5f0      	push	{r4, r5, r6, r7, lr}
     10a:	46c6      	mov	lr, r8
     10c:	b500      	push	{lr}
     10e:	b082      	sub	sp, #8
     110:	0005      	movs	r5, r0
     112:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     114:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     116:	4a2a      	ldr	r2, [pc, #168]	; (1c0 <dac_init+0xb8>)
     118:	6a10      	ldr	r0, [r2, #32]
     11a:	2380      	movs	r3, #128	; 0x80
     11c:	00db      	lsls	r3, r3, #3
     11e:	4303      	orrs	r3, r0
     120:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     122:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     124:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     126:	079b      	lsls	r3, r3, #30
     128:	d503      	bpl.n	132 <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
     12a:	b002      	add	sp, #8
     12c:	bc04      	pop	{r2}
     12e:	4690      	mov	r8, r2
     130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     132:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     134:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     136:	07db      	lsls	r3, r3, #31
     138:	d4f7      	bmi.n	12a <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
     13a:	a901      	add	r1, sp, #4
     13c:	78e3      	ldrb	r3, [r4, #3]
     13e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     140:	3011      	adds	r0, #17
     142:	4b20      	ldr	r3, [pc, #128]	; (1c4 <dac_init+0xbc>)
     144:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     146:	2016      	movs	r0, #22
     148:	4b1f      	ldr	r3, [pc, #124]	; (1c8 <dac_init+0xc0>)
     14a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     14c:	2600      	movs	r6, #0
     14e:	466b      	mov	r3, sp
     150:	705e      	strb	r6, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     152:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     154:	2301      	movs	r3, #1
     156:	466a      	mov	r2, sp
     158:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     15a:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     15c:	4669      	mov	r1, sp
     15e:	2002      	movs	r0, #2
     160:	4b1a      	ldr	r3, [pc, #104]	; (1cc <dac_init+0xc4>)
     162:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
     164:	682b      	ldr	r3, [r5, #0]
     166:	4698      	mov	r8, r3
	module_inst->output = config->output;
     168:	7863      	ldrb	r3, [r4, #1]
     16a:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
     16c:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
     16e:	79a3      	ldrb	r3, [r4, #6]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     170:	1e5a      	subs	r2, r3, #1
     172:	4193      	sbcs	r3, r2
     174:	009b      	lsls	r3, r3, #2
	new_ctrlb |= config->reference;
     176:	7826      	ldrb	r6, [r4, #0]
	if (config->left_adjust) {
     178:	78a2      	ldrb	r2, [r4, #2]
     17a:	2a00      	cmp	r2, #0
     17c:	d001      	beq.n	182 <dac_init+0x7a>
     17e:	2204      	movs	r2, #4
     180:	4316      	orrs	r6, r2
	if (config->databuf_protection_bypass) {
     182:	7922      	ldrb	r2, [r4, #4]
     184:	2a00      	cmp	r2, #0
     186:	d001      	beq.n	18c <dac_init+0x84>
     188:	2210      	movs	r2, #16
     18a:	4316      	orrs	r6, r2
	if (config->voltage_pump_disable) {
     18c:	7962      	ldrb	r2, [r4, #5]
     18e:	2a00      	cmp	r2, #0
     190:	d001      	beq.n	196 <dac_init+0x8e>
     192:	2208      	movs	r2, #8
     194:	4316      	orrs	r6, r2
	dac_module->CTRLA.reg = new_ctrla;
     196:	b2db      	uxtb	r3, r3
     198:	4642      	mov	r2, r8
     19a:	7013      	strb	r3, [r2, #0]
	while (dac_is_syncing(module_inst)) {
     19c:	4f0c      	ldr	r7, [pc, #48]	; (1d0 <dac_init+0xc8>)
     19e:	0028      	movs	r0, r5
     1a0:	47b8      	blx	r7
     1a2:	2800      	cmp	r0, #0
     1a4:	d1fb      	bne.n	19e <dac_init+0x96>
	dac_module->CTRLB.reg = new_ctrlb;
     1a6:	b2f6      	uxtb	r6, r6
     1a8:	4643      	mov	r3, r8
     1aa:	705e      	strb	r6, [r3, #1]
	module_inst->reference = config->reference;
     1ac:	7823      	ldrb	r3, [r4, #0]
     1ae:	716b      	strb	r3, [r5, #5]
		module_inst->callback[i] = NULL;
     1b0:	2300      	movs	r3, #0
     1b2:	616b      	str	r3, [r5, #20]
     1b4:	61ab      	str	r3, [r5, #24]
     1b6:	61eb      	str	r3, [r5, #28]
	_dac_instances[0] = module_inst;
     1b8:	4b06      	ldr	r3, [pc, #24]	; (1d4 <dac_init+0xcc>)
     1ba:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
     1bc:	e7b5      	b.n	12a <dac_init+0x22>
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	40000400 	.word	0x40000400
     1c4:	00001099 	.word	0x00001099
     1c8:	0000100d 	.word	0x0000100d
     1cc:	00001191 	.word	0x00001191
     1d0:	000000ed 	.word	0x000000ed
     1d4:	20000054 	.word	0x20000054

000001d8 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     1d8:	b570      	push	{r4, r5, r6, lr}
     1da:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     1dc:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     1de:	7873      	ldrb	r3, [r6, #1]
     1e0:	7902      	ldrb	r2, [r0, #4]
     1e2:	4313      	orrs	r3, r2
     1e4:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
     1e6:	4d09      	ldr	r5, [pc, #36]	; (20c <dac_enable+0x34>)
     1e8:	0020      	movs	r0, r4
     1ea:	47a8      	blx	r5
     1ec:	2800      	cmp	r0, #0
     1ee:	d1fb      	bne.n	1e8 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     1f0:	7833      	ldrb	r3, [r6, #0]
     1f2:	2202      	movs	r2, #2
     1f4:	4313      	orrs	r3, r2
     1f6:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     1f8:	7963      	ldrb	r3, [r4, #5]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d104      	bne.n	208 <dac_enable+0x30>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1fe:	4a04      	ldr	r2, [pc, #16]	; (210 <dac_enable+0x38>)
     200:	6c13      	ldr	r3, [r2, #64]	; 0x40
     202:	2104      	movs	r1, #4
     204:	430b      	orrs	r3, r1
     206:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	000000ed 	.word	0x000000ed
     210:	40000800 	.word	0x40000800

00000214 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
     214:	4770      	bx	lr

00000216 <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
     216:	4770      	bx	lr

00000218 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
     218:	4770      	bx	lr
	...

0000021c <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     21e:	0004      	movs	r4, r0
     220:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     222:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     224:	4d06      	ldr	r5, [pc, #24]	; (240 <dac_chan_write+0x24>)
     226:	0020      	movs	r0, r4
     228:	47a8      	blx	r5
     22a:	2800      	cmp	r0, #0
     22c:	d1fb      	bne.n	226 <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
     22e:	79a3      	ldrb	r3, [r4, #6]
     230:	2b00      	cmp	r3, #0
     232:	d102      	bne.n	23a <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     234:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
     236:	2000      	movs	r0, #0
     238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
     23a:	81b7      	strh	r7, [r6, #12]
     23c:	e7fb      	b.n	236 <dac_chan_write+0x1a>
     23e:	46c0      	nop			; (mov r8, r8)
     240:	000000ed 	.word	0x000000ed

00000244 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     244:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     246:	4b27      	ldr	r3, [pc, #156]	; (2e4 <DAC_Handler+0xa0>)
     248:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     24a:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     24c:	79ab      	ldrb	r3, [r5, #6]
     24e:	07db      	lsls	r3, r3, #31
     250:	d507      	bpl.n	262 <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     252:	2301      	movs	r3, #1
     254:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     256:	0023      	movs	r3, r4
     258:	3314      	adds	r3, #20
     25a:	d002      	beq.n	262 <DAC_Handler+0x1e>
     25c:	7c63      	ldrb	r3, [r4, #17]
     25e:	2b00      	cmp	r3, #0
     260:	d131      	bne.n	2c6 <DAC_Handler+0x82>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     262:	79ab      	ldrb	r3, [r5, #6]
     264:	079b      	lsls	r3, r3, #30
     266:	d538      	bpl.n	2da <DAC_Handler+0x96>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     268:	2302      	movs	r3, #2
     26a:	71ab      	strb	r3, [r5, #6]
		if (module->remaining_conversions) {
     26c:	89a3      	ldrh	r3, [r4, #12]
     26e:	b29b      	uxth	r3, r3
     270:	2b00      	cmp	r3, #0
     272:	d02c      	beq.n	2ce <DAC_Handler+0x8a>
				module->job_buffer[module->transferred_conversions++];
     274:	89e3      	ldrh	r3, [r4, #14]
     276:	b29b      	uxth	r3, r3
     278:	1c5a      	adds	r2, r3, #1
     27a:	b292      	uxth	r2, r2
     27c:	81e2      	strh	r2, [r4, #14]
     27e:	005b      	lsls	r3, r3, #1
     280:	68a2      	ldr	r2, [r4, #8]
     282:	4694      	mov	ip, r2
     284:	4463      	add	r3, ip
     286:	881b      	ldrh	r3, [r3, #0]
     288:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
     28a:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
     28c:	89a3      	ldrh	r3, [r4, #12]
     28e:	3b01      	subs	r3, #1
     290:	b29b      	uxth	r3, r3
     292:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
     294:	89a3      	ldrh	r3, [r4, #12]
     296:	b29b      	uxth	r3, r3
     298:	2b00      	cmp	r3, #0
     29a:	d118      	bne.n	2ce <DAC_Handler+0x8a>
				module->job_status = STATUS_OK;
     29c:	2200      	movs	r2, #0
     29e:	3320      	adds	r3, #32
     2a0:	54e2      	strb	r2, [r4, r3]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     2a2:	3b1e      	subs	r3, #30
     2a4:	712b      	strb	r3, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     2a6:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2a8:	2180      	movs	r1, #128	; 0x80
     2aa:	0289      	lsls	r1, r1, #10
     2ac:	337e      	adds	r3, #126	; 0x7e
     2ae:	4a0e      	ldr	r2, [pc, #56]	; (2e8 <DAC_Handler+0xa4>)
     2b0:	50d1      	str	r1, [r2, r3]
				if ((module->callback) &&
     2b2:	0023      	movs	r3, r4
     2b4:	3314      	adds	r3, #20
     2b6:	d010      	beq.n	2da <DAC_Handler+0x96>
     2b8:	7ca3      	ldrb	r3, [r4, #18]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d00a      	beq.n	2d4 <DAC_Handler+0x90>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     2be:	2000      	movs	r0, #0
     2c0:	69e3      	ldr	r3, [r4, #28]
     2c2:	4798      	blx	r3
     2c4:	e006      	b.n	2d4 <DAC_Handler+0x90>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     2c6:	2000      	movs	r0, #0
     2c8:	69a3      	ldr	r3, [r4, #24]
     2ca:	4798      	blx	r3
     2cc:	e7c9      	b.n	262 <DAC_Handler+0x1e>
		if ((module->callback) &&
     2ce:	0023      	movs	r3, r4
     2d0:	3314      	adds	r3, #20
     2d2:	d002      	beq.n	2da <DAC_Handler+0x96>
     2d4:	7c23      	ldrb	r3, [r4, #16]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d100      	bne.n	2dc <DAC_Handler+0x98>
	_dac_interrupt_handler(0);
}
     2da:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     2dc:	6963      	ldr	r3, [r4, #20]
     2de:	2000      	movs	r0, #0
     2e0:	4798      	blx	r3
}
     2e2:	e7fa      	b.n	2da <DAC_Handler+0x96>
     2e4:	20000054 	.word	0x20000054
     2e8:	e000e100 	.word	0xe000e100

000002ec <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     2ec:	4a04      	ldr	r2, [pc, #16]	; (300 <_extint_enable+0x14>)
     2ee:	7813      	ldrb	r3, [r2, #0]
     2f0:	2102      	movs	r1, #2
     2f2:	430b      	orrs	r3, r1
     2f4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2f6:	7853      	ldrb	r3, [r2, #1]
     2f8:	b25b      	sxtb	r3, r3
     2fa:	2b00      	cmp	r3, #0
     2fc:	dbfb      	blt.n	2f6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2fe:	4770      	bx	lr
     300:	40001800 	.word	0x40001800

00000304 <_system_extint_init>:
{
     304:	b500      	push	{lr}
     306:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     308:	4a12      	ldr	r2, [pc, #72]	; (354 <_system_extint_init+0x50>)
     30a:	6993      	ldr	r3, [r2, #24]
     30c:	2140      	movs	r1, #64	; 0x40
     30e:	430b      	orrs	r3, r1
     310:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     312:	a901      	add	r1, sp, #4
     314:	2300      	movs	r3, #0
     316:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     318:	2005      	movs	r0, #5
     31a:	4b0f      	ldr	r3, [pc, #60]	; (358 <_system_extint_init+0x54>)
     31c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     31e:	2005      	movs	r0, #5
     320:	4b0e      	ldr	r3, [pc, #56]	; (35c <_system_extint_init+0x58>)
     322:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     324:	4a0e      	ldr	r2, [pc, #56]	; (360 <_system_extint_init+0x5c>)
     326:	7813      	ldrb	r3, [r2, #0]
     328:	2101      	movs	r1, #1
     32a:	430b      	orrs	r3, r1
     32c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     32e:	7853      	ldrb	r3, [r2, #1]
     330:	b25b      	sxtb	r3, r3
     332:	2b00      	cmp	r3, #0
     334:	dbfb      	blt.n	32e <_system_extint_init+0x2a>
     336:	4b0b      	ldr	r3, [pc, #44]	; (364 <_system_extint_init+0x60>)
     338:	0019      	movs	r1, r3
     33a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     33c:	2200      	movs	r2, #0
     33e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     340:	4299      	cmp	r1, r3
     342:	d1fc      	bne.n	33e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     344:	2210      	movs	r2, #16
     346:	4b08      	ldr	r3, [pc, #32]	; (368 <_system_extint_init+0x64>)
     348:	601a      	str	r2, [r3, #0]
	_extint_enable();
     34a:	4b08      	ldr	r3, [pc, #32]	; (36c <_system_extint_init+0x68>)
     34c:	4798      	blx	r3
}
     34e:	b003      	add	sp, #12
     350:	bd00      	pop	{pc}
     352:	46c0      	nop			; (mov r8, r8)
     354:	40000400 	.word	0x40000400
     358:	00001099 	.word	0x00001099
     35c:	0000100d 	.word	0x0000100d
     360:	40001800 	.word	0x40001800
     364:	20000058 	.word	0x20000058
     368:	e000e100 	.word	0xe000e100
     36c:	000002ed 	.word	0x000002ed

00000370 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     370:	2300      	movs	r3, #0
     372:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     374:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     376:	2201      	movs	r2, #1
     378:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     37a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     37c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     37e:	3302      	adds	r3, #2
     380:	72c3      	strb	r3, [r0, #11]
}
     382:	4770      	bx	lr

00000384 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     384:	b5f0      	push	{r4, r5, r6, r7, lr}
     386:	b083      	sub	sp, #12
     388:	0005      	movs	r5, r0
     38a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     38c:	a901      	add	r1, sp, #4
     38e:	2300      	movs	r3, #0
     390:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     392:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     394:	7923      	ldrb	r3, [r4, #4]
     396:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     398:	7a23      	ldrb	r3, [r4, #8]
     39a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     39c:	7820      	ldrb	r0, [r4, #0]
     39e:	4b15      	ldr	r3, [pc, #84]	; (3f4 <extint_chan_set_config+0x70>)
     3a0:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     3a2:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     3a4:	2d1f      	cmp	r5, #31
     3a6:	d800      	bhi.n	3aa <extint_chan_set_config+0x26>
		return eics[eic_index];
     3a8:	4813      	ldr	r0, [pc, #76]	; (3f8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     3aa:	2207      	movs	r2, #7
     3ac:	402a      	ands	r2, r5
     3ae:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     3b0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     3b2:	7aa3      	ldrb	r3, [r4, #10]
     3b4:	2b00      	cmp	r3, #0
     3b6:	d001      	beq.n	3bc <extint_chan_set_config+0x38>
     3b8:	2308      	movs	r3, #8
     3ba:	431f      	orrs	r7, r3
     3bc:	08eb      	lsrs	r3, r5, #3
     3be:	009b      	lsls	r3, r3, #2
     3c0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     3c2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3c4:	260f      	movs	r6, #15
     3c6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     3c8:	43b1      	bics	r1, r6
			(new_config << config_pos);
     3ca:	4097      	lsls	r7, r2
     3cc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     3ce:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     3d0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     3d2:	7a63      	ldrb	r3, [r4, #9]
     3d4:	2b00      	cmp	r3, #0
     3d6:	d106      	bne.n	3e6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     3d8:	6943      	ldr	r3, [r0, #20]
     3da:	2201      	movs	r2, #1
     3dc:	40aa      	lsls	r2, r5
     3de:	4393      	bics	r3, r2
     3e0:	6143      	str	r3, [r0, #20]
	}
}
     3e2:	b003      	add	sp, #12
     3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     3e6:	6942      	ldr	r2, [r0, #20]
     3e8:	2301      	movs	r3, #1
     3ea:	40ab      	lsls	r3, r5
     3ec:	4313      	orrs	r3, r2
     3ee:	6143      	str	r3, [r0, #20]
     3f0:	e7f7      	b.n	3e2 <extint_chan_set_config+0x5e>
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	00001191 	.word	0x00001191
     3f8:	40001800 	.word	0x40001800

000003fc <convert_digital>:
#include "dacc_control.h"
#include "dacc.h"
#include "timer_control.h"
static uint16_t digital_value[2];
void convert_digital()
{
     3fc:	b570      	push	{r4, r5, r6, lr}
	
	digital_value[0] = read_ds_digital();
     3fe:	4b10      	ldr	r3, [pc, #64]	; (440 <STACK_SIZE+0x40>)
     400:	4798      	blx	r3
	if(digital_value[0] > 0x1c00)
     402:	23e0      	movs	r3, #224	; 0xe0
     404:	015b      	lsls	r3, r3, #5
     406:	4298      	cmp	r0, r3
     408:	d814      	bhi.n	434 <STACK_SIZE+0x34>
	digital_value[0] = read_ds_digital();
     40a:	4b0e      	ldr	r3, [pc, #56]	; (444 <STACK_SIZE+0x44>)
     40c:	8018      	strh	r0, [r3, #0]
	{
		digital_value[0] = 0x1c00;
	}
	digital_value[1] = (digital_value[0]*0x3FF) / (0x1c00); //2AA -- 2.2V
     40e:	4c0d      	ldr	r4, [pc, #52]	; (444 <STACK_SIZE+0x44>)
     410:	8823      	ldrh	r3, [r4, #0]
     412:	0298      	lsls	r0, r3, #10
     414:	1ac0      	subs	r0, r0, r3
     416:	21e0      	movs	r1, #224	; 0xe0
     418:	0149      	lsls	r1, r1, #5
     41a:	4b0b      	ldr	r3, [pc, #44]	; (448 <STACK_SIZE+0x48>)
     41c:	4798      	blx	r3
     41e:	8060      	strh	r0, [r4, #2]
	while(dac_chan_write( &dac_instance_ds , DAC_CHANNEL_0 , digital_value[1]) != STATUS_OK);
     420:	0026      	movs	r6, r4
     422:	4d0a      	ldr	r5, [pc, #40]	; (44c <STACK_SIZE+0x4c>)
     424:	4c0a      	ldr	r4, [pc, #40]	; (450 <STACK_SIZE+0x50>)
     426:	8872      	ldrh	r2, [r6, #2]
     428:	2100      	movs	r1, #0
     42a:	0028      	movs	r0, r5
     42c:	47a0      	blx	r4
     42e:	2800      	cmp	r0, #0
     430:	d1f9      	bne.n	426 <STACK_SIZE+0x26>
}
     432:	bd70      	pop	{r4, r5, r6, pc}
		digital_value[0] = 0x1c00;
     434:	22e0      	movs	r2, #224	; 0xe0
     436:	0152      	lsls	r2, r2, #5
     438:	4b02      	ldr	r3, [pc, #8]	; (444 <STACK_SIZE+0x44>)
     43a:	801a      	strh	r2, [r3, #0]
     43c:	e7e7      	b.n	40e <STACK_SIZE+0xe>
     43e:	46c0      	nop			; (mov r8, r8)
     440:	00000a79 	.word	0x00000a79
     444:	20000028 	.word	0x20000028
     448:	00001405 	.word	0x00001405
     44c:	20000098 	.word	0x20000098
     450:	0000021d 	.word	0x0000021d

00000454 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     454:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     456:	2a00      	cmp	r2, #0
     458:	d001      	beq.n	45e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     45a:	0018      	movs	r0, r3
     45c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     45e:	008b      	lsls	r3, r1, #2
     460:	4a06      	ldr	r2, [pc, #24]	; (47c <extint_register_callback+0x28>)
     462:	589b      	ldr	r3, [r3, r2]
     464:	2b00      	cmp	r3, #0
     466:	d003      	beq.n	470 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     468:	4283      	cmp	r3, r0
     46a:	d005      	beq.n	478 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     46c:	231d      	movs	r3, #29
     46e:	e7f4      	b.n	45a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     470:	0089      	lsls	r1, r1, #2
     472:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     474:	2300      	movs	r3, #0
     476:	e7f0      	b.n	45a <extint_register_callback+0x6>
		return STATUS_OK;
     478:	2300      	movs	r3, #0
     47a:	e7ee      	b.n	45a <extint_register_callback+0x6>
     47c:	20000058 	.word	0x20000058

00000480 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     480:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     482:	2900      	cmp	r1, #0
     484:	d001      	beq.n	48a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     486:	0018      	movs	r0, r3
     488:	4770      	bx	lr
		return NULL;
     48a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     48c:	281f      	cmp	r0, #31
     48e:	d800      	bhi.n	492 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     490:	4a02      	ldr	r2, [pc, #8]	; (49c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     492:	2301      	movs	r3, #1
     494:	4083      	lsls	r3, r0
     496:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     498:	2300      	movs	r3, #0
     49a:	e7f4      	b.n	486 <extint_chan_enable_callback+0x6>
     49c:	40001800 	.word	0x40001800

000004a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     4a0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4a2:	2200      	movs	r2, #0
     4a4:	4b10      	ldr	r3, [pc, #64]	; (4e8 <EIC_Handler+0x48>)
     4a6:	701a      	strb	r2, [r3, #0]
     4a8:	2300      	movs	r3, #0
     4aa:	4910      	ldr	r1, [pc, #64]	; (4ec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     4ac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4ae:	4e10      	ldr	r6, [pc, #64]	; (4f0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4b0:	4c0d      	ldr	r4, [pc, #52]	; (4e8 <EIC_Handler+0x48>)
     4b2:	e00a      	b.n	4ca <EIC_Handler+0x2a>
		return eics[eic_index];
     4b4:	490d      	ldr	r1, [pc, #52]	; (4ec <EIC_Handler+0x4c>)
     4b6:	e008      	b.n	4ca <EIC_Handler+0x2a>
     4b8:	7823      	ldrb	r3, [r4, #0]
     4ba:	3301      	adds	r3, #1
     4bc:	b2db      	uxtb	r3, r3
     4be:	7023      	strb	r3, [r4, #0]
     4c0:	2b0f      	cmp	r3, #15
     4c2:	d810      	bhi.n	4e6 <EIC_Handler+0x46>
		return NULL;
     4c4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     4c6:	2b1f      	cmp	r3, #31
     4c8:	d9f4      	bls.n	4b4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     4ca:	0028      	movs	r0, r5
     4cc:	4018      	ands	r0, r3
     4ce:	2201      	movs	r2, #1
     4d0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     4d2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     4d4:	4210      	tst	r0, r2
     4d6:	d0ef      	beq.n	4b8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     4d8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     4da:	009b      	lsls	r3, r3, #2
     4dc:	599b      	ldr	r3, [r3, r6]
     4de:	2b00      	cmp	r3, #0
     4e0:	d0ea      	beq.n	4b8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     4e2:	4798      	blx	r3
     4e4:	e7e8      	b.n	4b8 <EIC_Handler+0x18>
			}
		}
	}
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
     4e8:	200000bc 	.word	0x200000bc
     4ec:	40001800 	.word	0x40001800
     4f0:	20000058 	.word	0x20000058

000004f4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <_tc_get_inst_index+0x1c>)
     4f6:	4298      	cmp	r0, r3
     4f8:	d008      	beq.n	50c <_tc_get_inst_index+0x18>
     4fa:	4a06      	ldr	r2, [pc, #24]	; (514 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     4fc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     4fe:	4290      	cmp	r0, r2
     500:	d001      	beq.n	506 <_tc_get_inst_index+0x12>
}
     502:	0018      	movs	r0, r3
     504:	4770      	bx	lr
     506:	3301      	adds	r3, #1
			return i;
     508:	b2db      	uxtb	r3, r3
     50a:	e7fa      	b.n	502 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     50c:	2300      	movs	r3, #0
     50e:	e7fb      	b.n	508 <_tc_get_inst_index+0x14>
     510:	42001800 	.word	0x42001800
     514:	42001c00 	.word	0x42001c00

00000518 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     518:	b5f0      	push	{r4, r5, r6, r7, lr}
     51a:	b085      	sub	sp, #20
     51c:	0004      	movs	r4, r0
     51e:	000d      	movs	r5, r1
     520:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     522:	0008      	movs	r0, r1
     524:	4b82      	ldr	r3, [pc, #520]	; (730 <tc_init+0x218>)
     526:	4798      	blx	r3
     528:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     52a:	ab03      	add	r3, sp, #12
     52c:	2212      	movs	r2, #18
     52e:	701a      	strb	r2, [r3, #0]
     530:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     532:	ab02      	add	r3, sp, #8
     534:	322e      	adds	r2, #46	; 0x2e
     536:	801a      	strh	r2, [r3, #0]
     538:	3240      	adds	r2, #64	; 0x40
     53a:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     53c:	2300      	movs	r3, #0
     53e:	60a3      	str	r3, [r4, #8]
     540:	60e3      	str	r3, [r4, #12]
     542:	6123      	str	r3, [r4, #16]
     544:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     546:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     548:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     54a:	0082      	lsls	r2, r0, #2
     54c:	4b79      	ldr	r3, [pc, #484]	; (734 <tc_init+0x21c>)
     54e:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     550:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     552:	78b3      	ldrb	r3, [r6, #2]
     554:	2b08      	cmp	r3, #8
     556:	d006      	beq.n	566 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     558:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     55a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     55c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     55e:	07db      	lsls	r3, r3, #31
     560:	d505      	bpl.n	56e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     562:	b005      	add	sp, #20
     564:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     568:	07fa      	lsls	r2, r7, #31
     56a:	d4fa      	bmi.n	562 <tc_init+0x4a>
     56c:	e7f4      	b.n	558 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     56e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     570:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     572:	06db      	lsls	r3, r3, #27
     574:	d4f5      	bmi.n	562 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     576:	882b      	ldrh	r3, [r5, #0]
     578:	079b      	lsls	r3, r3, #30
     57a:	d4f2      	bmi.n	562 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     57c:	7c33      	ldrb	r3, [r6, #16]
     57e:	2b00      	cmp	r3, #0
     580:	d000      	beq.n	584 <tc_init+0x6c>
     582:	e07a      	b.n	67a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     584:	7f33      	ldrb	r3, [r6, #28]
     586:	2b00      	cmp	r3, #0
     588:	d000      	beq.n	58c <tc_init+0x74>
     58a:	e082      	b.n	692 <tc_init+0x17a>
			PM->APBCMASK.reg |= mask;
     58c:	496a      	ldr	r1, [pc, #424]	; (738 <tc_init+0x220>)
     58e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     590:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     592:	ab02      	add	r3, sp, #8
     594:	5ad3      	ldrh	r3, [r2, r3]
     596:	4303      	orrs	r3, r0
     598:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     59a:	78b3      	ldrb	r3, [r6, #2]
     59c:	2b08      	cmp	r3, #8
     59e:	d100      	bne.n	5a2 <tc_init+0x8a>
     5a0:	e087      	b.n	6b2 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     5a2:	7833      	ldrb	r3, [r6, #0]
     5a4:	466a      	mov	r2, sp
     5a6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     5a8:	ab03      	add	r3, sp, #12
     5aa:	5ddf      	ldrb	r7, [r3, r7]
     5ac:	4669      	mov	r1, sp
     5ae:	0038      	movs	r0, r7
     5b0:	4b62      	ldr	r3, [pc, #392]	; (73c <tc_init+0x224>)
     5b2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     5b4:	0038      	movs	r0, r7
     5b6:	4b62      	ldr	r3, [pc, #392]	; (740 <tc_init+0x228>)
     5b8:	4798      	blx	r3
	ctrla_tmp =
     5ba:	8931      	ldrh	r1, [r6, #8]
     5bc:	88b3      	ldrh	r3, [r6, #4]
     5be:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     5c0:	78b1      	ldrb	r1, [r6, #2]
     5c2:	79b2      	ldrb	r2, [r6, #6]
     5c4:	4311      	orrs	r1, r2
	ctrla_tmp =
     5c6:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     5c8:	7873      	ldrb	r3, [r6, #1]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d002      	beq.n	5d4 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     5ce:	2380      	movs	r3, #128	; 0x80
     5d0:	011b      	lsls	r3, r3, #4
     5d2:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5d4:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5d6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5d8:	b25b      	sxtb	r3, r3
     5da:	2b00      	cmp	r3, #0
     5dc:	dbfb      	blt.n	5d6 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     5de:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     5e0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     5e2:	1e4b      	subs	r3, r1, #1
     5e4:	4199      	sbcs	r1, r3
     5e6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     5e8:	7bb3      	ldrb	r3, [r6, #14]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d001      	beq.n	5f2 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     5ee:	2301      	movs	r3, #1
     5f0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5f4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     5f6:	b25b      	sxtb	r3, r3
     5f8:	2b00      	cmp	r3, #0
     5fa:	dbfb      	blt.n	5f4 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     5fc:	23ff      	movs	r3, #255	; 0xff
     5fe:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     600:	2900      	cmp	r1, #0
     602:	d005      	beq.n	610 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     604:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     606:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     608:	b25b      	sxtb	r3, r3
     60a:	2b00      	cmp	r3, #0
     60c:	dbfb      	blt.n	606 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     60e:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     610:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     612:	7af3      	ldrb	r3, [r6, #11]
     614:	2b00      	cmp	r3, #0
     616:	d001      	beq.n	61c <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     618:	2310      	movs	r3, #16
     61a:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     61c:	7b33      	ldrb	r3, [r6, #12]
     61e:	2b00      	cmp	r3, #0
     620:	d001      	beq.n	626 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     622:	2320      	movs	r3, #32
     624:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     626:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     628:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     62a:	b25b      	sxtb	r3, r3
     62c:	2b00      	cmp	r3, #0
     62e:	dbfb      	blt.n	628 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     630:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     632:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     634:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     636:	b25b      	sxtb	r3, r3
     638:	2b00      	cmp	r3, #0
     63a:	dbfb      	blt.n	634 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     63c:	7923      	ldrb	r3, [r4, #4]
     63e:	2b04      	cmp	r3, #4
     640:	d03f      	beq.n	6c2 <tc_init+0x1aa>
     642:	2b08      	cmp	r3, #8
     644:	d05e      	beq.n	704 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     646:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     648:	2b00      	cmp	r3, #0
     64a:	d000      	beq.n	64e <tc_init+0x136>
     64c:	e789      	b.n	562 <tc_init+0x4a>
     64e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     650:	b25b      	sxtb	r3, r3
     652:	2b00      	cmp	r3, #0
     654:	dbfb      	blt.n	64e <tc_init+0x136>
				= config->counter_16_bit.value;
     656:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     658:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     65a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     65c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     65e:	b25b      	sxtb	r3, r3
     660:	2b00      	cmp	r3, #0
     662:	dbfb      	blt.n	65c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     664:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     666:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     668:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     66a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     66c:	b25b      	sxtb	r3, r3
     66e:	2b00      	cmp	r3, #0
     670:	dbfb      	blt.n	66a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     672:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     674:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     676:	2000      	movs	r0, #0
     678:	e773      	b.n	562 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     67a:	a901      	add	r1, sp, #4
     67c:	2301      	movs	r3, #1
     67e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     680:	2200      	movs	r2, #0
     682:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     684:	7e32      	ldrb	r2, [r6, #24]
     686:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     688:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     68a:	7d30      	ldrb	r0, [r6, #20]
     68c:	4b2d      	ldr	r3, [pc, #180]	; (744 <tc_init+0x22c>)
     68e:	4798      	blx	r3
     690:	e778      	b.n	584 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     692:	a901      	add	r1, sp, #4
     694:	2301      	movs	r3, #1
     696:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     698:	2200      	movs	r2, #0
     69a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     69c:	3224      	adds	r2, #36	; 0x24
     69e:	18b2      	adds	r2, r6, r2
     6a0:	7812      	ldrb	r2, [r2, #0]
     6a2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6a4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6a6:	331f      	adds	r3, #31
     6a8:	18f3      	adds	r3, r6, r3
     6aa:	7818      	ldrb	r0, [r3, #0]
     6ac:	4b25      	ldr	r3, [pc, #148]	; (744 <tc_init+0x22c>)
     6ae:	4798      	blx	r3
     6b0:	e76c      	b.n	58c <tc_init+0x74>
     6b2:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     6b4:	1c7a      	adds	r2, r7, #1
     6b6:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     6b8:	ab02      	add	r3, sp, #8
     6ba:	5ad3      	ldrh	r3, [r2, r3]
     6bc:	4303      	orrs	r3, r0
     6be:	620b      	str	r3, [r1, #32]
     6c0:	e76f      	b.n	5a2 <tc_init+0x8a>
     6c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6c4:	b25b      	sxtb	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	dbfb      	blt.n	6c2 <tc_init+0x1aa>
					config->counter_8_bit.value;
     6ca:	2328      	movs	r3, #40	; 0x28
     6cc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     6ce:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6d2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6d4:	b25b      	sxtb	r3, r3
     6d6:	2b00      	cmp	r3, #0
     6d8:	dbfb      	blt.n	6d2 <tc_init+0x1ba>
					config->counter_8_bit.period;
     6da:	2329      	movs	r3, #41	; 0x29
     6dc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     6de:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6e2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6e4:	b25b      	sxtb	r3, r3
     6e6:	2b00      	cmp	r3, #0
     6e8:	dbfb      	blt.n	6e2 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     6ea:	232a      	movs	r3, #42	; 0x2a
     6ec:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     6ee:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6f2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     6f4:	b25b      	sxtb	r3, r3
     6f6:	2b00      	cmp	r3, #0
     6f8:	dbfb      	blt.n	6f2 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     6fa:	232b      	movs	r3, #43	; 0x2b
     6fc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     6fe:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     700:	2000      	movs	r0, #0
     702:	e72e      	b.n	562 <tc_init+0x4a>
     704:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     706:	b25b      	sxtb	r3, r3
     708:	2b00      	cmp	r3, #0
     70a:	dbfb      	blt.n	704 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     70c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     70e:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     710:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     712:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     714:	b25b      	sxtb	r3, r3
     716:	2b00      	cmp	r3, #0
     718:	dbfb      	blt.n	712 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     71a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     71c:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     71e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     720:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     722:	b25b      	sxtb	r3, r3
     724:	2b00      	cmp	r3, #0
     726:	dbfb      	blt.n	720 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     728:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     72a:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     72c:	2000      	movs	r0, #0
     72e:	e718      	b.n	562 <tc_init+0x4a>
     730:	000004f5 	.word	0x000004f5
     734:	200000dc 	.word	0x200000dc
     738:	40000400 	.word	0x40000400
     73c:	00001099 	.word	0x00001099
     740:	0000100d 	.word	0x0000100d
     744:	00001191 	.word	0x00001191

00000748 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     748:	6802      	ldr	r2, [r0, #0]
     74a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     74c:	b25b      	sxtb	r3, r3
     74e:	2b00      	cmp	r3, #0
     750:	dbfb      	blt.n	74a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     752:	7903      	ldrb	r3, [r0, #4]
     754:	2b04      	cmp	r3, #4
     756:	d005      	beq.n	764 <tc_set_count_value+0x1c>
     758:	2b08      	cmp	r3, #8
     75a:	d00b      	beq.n	774 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
     75c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     75e:	2b00      	cmp	r3, #0
     760:	d004      	beq.n	76c <tc_set_count_value+0x24>
	}
}
     762:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     764:	b2c9      	uxtb	r1, r1
     766:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
     768:	2000      	movs	r0, #0
     76a:	e7fa      	b.n	762 <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     76c:	b289      	uxth	r1, r1
     76e:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
     770:	2000      	movs	r0, #0
     772:	e7f6      	b.n	762 <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     774:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
     776:	2000      	movs	r0, #0
     778:	e7f3      	b.n	762 <tc_set_count_value+0x1a>

0000077a <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     77a:	6802      	ldr	r2, [r0, #0]
     77c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     77e:	b25b      	sxtb	r3, r3
     780:	2b00      	cmp	r3, #0
     782:	dbfb      	blt.n	77c <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     784:	7903      	ldrb	r3, [r0, #4]
     786:	2b04      	cmp	r3, #4
     788:	d005      	beq.n	796 <tc_get_count_value+0x1c>
     78a:	2b08      	cmp	r3, #8
     78c:	d009      	beq.n	7a2 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     78e:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
     790:	2b00      	cmp	r3, #0
     792:	d003      	beq.n	79c <tc_get_count_value+0x22>
}
     794:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     796:	7c10      	ldrb	r0, [r2, #16]
     798:	b2c0      	uxtb	r0, r0
     79a:	e7fb      	b.n	794 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     79c:	8a10      	ldrh	r0, [r2, #16]
     79e:	b280      	uxth	r0, r0
     7a0:	e7f8      	b.n	794 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
     7a2:	6910      	ldr	r0, [r2, #16]
     7a4:	e7f6      	b.n	794 <tc_get_count_value+0x1a>
	...

000007a8 <configure_dac>:
 */
 #include <asf.h>
 #include "dacc.h"
 
 void configure_dac(void)
 {
     7a8:	b500      	push	{lr}
     7aa:	b083      	sub	sp, #12
	 struct dac_config config_dac;
	 dac_get_config_defaults(&config_dac);
     7ac:	4668      	mov	r0, sp
     7ae:	4b05      	ldr	r3, [pc, #20]	; (7c4 <configure_dac+0x1c>)
     7b0:	4798      	blx	r3
	 config_dac.reference = DAC_REFERENCE_AVCC;
     7b2:	2340      	movs	r3, #64	; 0x40
     7b4:	466a      	mov	r2, sp
     7b6:	7013      	strb	r3, [r2, #0]
	 dac_init(&dac_instance_ds, DAC, &config_dac);
     7b8:	4903      	ldr	r1, [pc, #12]	; (7c8 <configure_dac+0x20>)
     7ba:	4804      	ldr	r0, [pc, #16]	; (7cc <configure_dac+0x24>)
     7bc:	4b04      	ldr	r3, [pc, #16]	; (7d0 <configure_dac+0x28>)
     7be:	4798      	blx	r3
 }
     7c0:	b003      	add	sp, #12
     7c2:	bd00      	pop	{pc}
     7c4:	000000f5 	.word	0x000000f5
     7c8:	42002800 	.word	0x42002800
     7cc:	20000098 	.word	0x20000098
     7d0:	00000109 	.word	0x00000109

000007d4 <configure_dac_channel>:
 
 void configure_dac_channel(void)
 {
     7d4:	b510      	push	{r4, lr}
     7d6:	b082      	sub	sp, #8
	 
	 struct dac_chan_config config_dac_chan;
	 dac_chan_get_config_defaults(&config_dac_chan);
     7d8:	a801      	add	r0, sp, #4
     7da:	4b07      	ldr	r3, [pc, #28]	; (7f8 <configure_dac_channel+0x24>)
     7dc:	4798      	blx	r3
	 dac_chan_set_config(&dac_instance_ds, DAC_CHANNEL_0, &config_dac_chan);
     7de:	4c07      	ldr	r4, [pc, #28]	; (7fc <configure_dac_channel+0x28>)
     7e0:	aa01      	add	r2, sp, #4
     7e2:	2100      	movs	r1, #0
     7e4:	0020      	movs	r0, r4
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <configure_dac_channel+0x2c>)
     7e8:	4798      	blx	r3
	 dac_chan_enable(&dac_instance_ds, DAC_CHANNEL_0);
     7ea:	2100      	movs	r1, #0
     7ec:	0020      	movs	r0, r4
     7ee:	4b05      	ldr	r3, [pc, #20]	; (804 <configure_dac_channel+0x30>)
     7f0:	4798      	blx	r3
	 
 }
     7f2:	b002      	add	sp, #8
     7f4:	bd10      	pop	{r4, pc}
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	00000215 	.word	0x00000215
     7fc:	20000098 	.word	0x20000098
     800:	00000217 	.word	0x00000217
     804:	00000219 	.word	0x00000219

00000808 <configure_dac_pins>:
 
 void configure_dac_pins()
 {
     808:	b500      	push	{lr}
     80a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     80c:	a901      	add	r1, sp, #4
     80e:	2301      	movs	r3, #1
     810:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     812:	2200      	movs	r2, #0
     814:	708a      	strb	r2, [r1, #2]
	 // Enable output on the I/O line
	 struct port_config config_port_pin;
	 port_get_config_defaults(&config_port_pin);
	 config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     816:	700b      	strb	r3, [r1, #0]
	 port_pin_set_config(DISTANCE, &config_port_pin);
     818:	2002      	movs	r0, #2
     81a:	4b02      	ldr	r3, [pc, #8]	; (824 <configure_dac_pins+0x1c>)
     81c:	4798      	blx	r3
 }
     81e:	b003      	add	sp, #12
     820:	bd00      	pop	{pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	00000bbd 	.word	0x00000bbd

00000828 <enable_dac>:
 
 void enable_dac()
 {
     828:	b510      	push	{r4, lr}
	 dac_enable(&dac_instance_ds);
     82a:	4802      	ldr	r0, [pc, #8]	; (834 <enable_dac+0xc>)
     82c:	4b02      	ldr	r3, [pc, #8]	; (838 <enable_dac+0x10>)
     82e:	4798      	blx	r3
 }
     830:	bd10      	pop	{r4, pc}
     832:	46c0      	nop			; (mov r8, r8)
     834:	20000098 	.word	0x20000098
     838:	000001d9 	.word	0x000001d9

0000083c <init_dac>:
 
 void init_dac()
 {
     83c:	b510      	push	{r4, lr}
	 configure_dac_pins();
     83e:	4b04      	ldr	r3, [pc, #16]	; (850 <init_dac+0x14>)
     840:	4798      	blx	r3
	 configure_dac();
     842:	4b04      	ldr	r3, [pc, #16]	; (854 <init_dac+0x18>)
     844:	4798      	blx	r3
	 configure_dac_channel();
     846:	4b04      	ldr	r3, [pc, #16]	; (858 <init_dac+0x1c>)
     848:	4798      	blx	r3
	 enable_dac();
     84a:	4b04      	ldr	r3, [pc, #16]	; (85c <init_dac+0x20>)
     84c:	4798      	blx	r3
 }
     84e:	bd10      	pop	{r4, pc}
     850:	00000809 	.word	0x00000809
     854:	000007a9 	.word	0x000007a9
     858:	000007d5 	.word	0x000007d5
     85c:	00000829 	.word	0x00000829

00000860 <tc_callback_trigger>:
#include <asf.h>
#include "timer.h"
struct tc_module tc_instance_ds;

void tc_callback_trigger(struct tc_module *const module_inst)
{
     860:	b570      	push	{r4, r5, r6, lr}
	tc_set_count_value(&tc_instance_ds, 0);
     862:	2100      	movs	r1, #0
     864:	4805      	ldr	r0, [pc, #20]	; (87c <tc_callback_trigger+0x1c>)
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <tc_callback_trigger+0x20>)
     868:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     86a:	4c06      	ldr	r4, [pc, #24]	; (884 <tc_callback_trigger+0x24>)
     86c:	2580      	movs	r5, #128	; 0x80
     86e:	006d      	lsls	r5, r5, #1
     870:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(TRIGGER_PIN, true);
	delay_cycles_us(10); //this should actually be a 10 us delay because delay function is mysteriously misconfigured
     872:	200a      	movs	r0, #10
     874:	4b04      	ldr	r3, [pc, #16]	; (888 <tc_callback_trigger+0x28>)
     876:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     878:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(TRIGGER_PIN, false);
}
     87a:	bd70      	pop	{r4, r5, r6, pc}
     87c:	200000c0 	.word	0x200000c0
     880:	00000749 	.word	0x00000749
     884:	41004400 	.word	0x41004400
     888:	00000b91 	.word	0x00000b91

0000088c <echo_detection_callback>:

void echo_detection_callback(void)
{
     88c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <echo_detection_callback+0x34>)
     890:	6a1b      	ldr	r3, [r3, #32]
	bool pin_state = port_pin_get_input_level(ECHO_PIN);
	if(pin_state)
     892:	059b      	lsls	r3, r3, #22
     894:	d40c      	bmi.n	8b0 <echo_detection_callback+0x24>
	{
		rising_edge = tc_get_count_value(&tc_instance_ds);
	}
	else
	{
		pulse_width = tc_get_count_value(&tc_instance_ds) - rising_edge;
     896:	480b      	ldr	r0, [pc, #44]	; (8c4 <echo_detection_callback+0x38>)
     898:	4b0b      	ldr	r3, [pc, #44]	; (8c8 <echo_detection_callback+0x3c>)
     89a:	4798      	blx	r3
     89c:	4b0b      	ldr	r3, [pc, #44]	; (8cc <echo_detection_callback+0x40>)
     89e:	881b      	ldrh	r3, [r3, #0]
     8a0:	1ac0      	subs	r0, r0, r3
     8a2:	b280      	uxth	r0, r0
     8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <echo_detection_callback+0x44>)
     8a6:	8018      	strh	r0, [r3, #0]
		ready_distance_digital = true;
     8a8:	2201      	movs	r2, #1
     8aa:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <echo_detection_callback+0x48>)
     8ac:	701a      	strb	r2, [r3, #0]
	}
}
     8ae:	bd10      	pop	{r4, pc}
		rising_edge = tc_get_count_value(&tc_instance_ds);
     8b0:	4804      	ldr	r0, [pc, #16]	; (8c4 <echo_detection_callback+0x38>)
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <echo_detection_callback+0x3c>)
     8b4:	4798      	blx	r3
     8b6:	b280      	uxth	r0, r0
     8b8:	4b04      	ldr	r3, [pc, #16]	; (8cc <echo_detection_callback+0x40>)
     8ba:	8018      	strh	r0, [r3, #0]
     8bc:	e7f7      	b.n	8ae <echo_detection_callback+0x22>
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	41004400 	.word	0x41004400
     8c4:	200000c0 	.word	0x200000c0
     8c8:	0000077b 	.word	0x0000077b
     8cc:	20000050 	.word	0x20000050
     8d0:	2000004c 	.word	0x2000004c
     8d4:	2000004e 	.word	0x2000004e

000008d8 <config_pins_ds>:

void config_pins_ds()
{
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     8dc:	ac01      	add	r4, sp, #4
     8de:	2301      	movs	r3, #1
     8e0:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     8e2:	2600      	movs	r6, #0
     8e4:	70a6      	strb	r6, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	// Set trigger pin to output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     8e6:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(TRIGGER_PIN, &config_port_pin);
     8e8:	0021      	movs	r1, r4
     8ea:	2008      	movs	r0, #8
     8ec:	4d05      	ldr	r5, [pc, #20]	; (904 <config_pins_ds+0x2c>)
     8ee:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     8f0:	2280      	movs	r2, #128	; 0x80
     8f2:	0052      	lsls	r2, r2, #1
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <config_pins_ds+0x30>)
     8f6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TRIGGER_PIN, false);
	
	// Echo pin to input -- check if pull up or pull down configuration
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
     8f8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(ECHO_PIN, &config_port_pin);
     8fa:	0021      	movs	r1, r4
     8fc:	2009      	movs	r0, #9
     8fe:	47a8      	blx	r5
}
     900:	b002      	add	sp, #8
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	00000bbd 	.word	0x00000bbd
     908:	41004400 	.word	0x41004400

0000090c <config_tc1_ds>:

void config_tc1_ds(void)
{
     90c:	b500      	push	{lr}
     90e:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     910:	aa01      	add	r2, sp, #4
     912:	2300      	movs	r3, #0
     914:	2100      	movs	r1, #0
     916:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     918:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     91a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     91c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     91e:	2000      	movs	r0, #0
     920:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     922:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     924:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     926:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     928:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     92a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     92c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     92e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     930:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     932:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     934:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     936:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     938:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     93a:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     93c:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc_ds;
	tc_get_config_defaults(&config_tc_ds);
	
	config_tc_ds.counter_size = TC_COUNTER_SIZE_16BIT; //16
	config_tc_ds.clock_source = GCLK_GENERATOR_0;
	config_tc_ds.clock_prescaler = TC_CLOCK_PRESCALER_DIV16; //64 msec
     93e:	2380      	movs	r3, #128	; 0x80
     940:	00db      	lsls	r3, r3, #3
     942:	8093      	strh	r3, [r2, #4]
	
	//Overflow occurs in 68msec
	//config_tc_ds.counter_16_bit.value = 18661; // Overflows in 62.5ms
	
	config_tc_ds.count_direction = TC_COUNT_DIRECTION_UP;
	tc_init(&tc_instance_ds, TC1, &config_tc_ds);
     944:	4902      	ldr	r1, [pc, #8]	; (950 <config_tc1_ds+0x44>)
     946:	4803      	ldr	r0, [pc, #12]	; (954 <config_tc1_ds+0x48>)
     948:	4b03      	ldr	r3, [pc, #12]	; (958 <config_tc1_ds+0x4c>)
     94a:	4798      	blx	r3
}
     94c:	b00f      	add	sp, #60	; 0x3c
     94e:	bd00      	pop	{pc}
     950:	42001800 	.word	0x42001800
     954:	200000c0 	.word	0x200000c0
     958:	00000519 	.word	0x00000519

0000095c <tc1_callbacks_ds>:

void tc1_callbacks_ds()
{
     95c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance_ds, tc_callback_trigger,TC_CALLBACK_OVERFLOW);
     95e:	2200      	movs	r2, #0
     960:	4902      	ldr	r1, [pc, #8]	; (96c <tc1_callbacks_ds+0x10>)
     962:	4803      	ldr	r0, [pc, #12]	; (970 <tc1_callbacks_ds+0x14>)
     964:	4b03      	ldr	r3, [pc, #12]	; (974 <tc1_callbacks_ds+0x18>)
     966:	4798      	blx	r3
}
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00000861 	.word	0x00000861
     970:	200000c0 	.word	0x200000c0
     974:	00000a99 	.word	0x00000a99

00000978 <enable_tc1_ds>:

void enable_tc1_ds()
{
     978:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     97a:	4b0f      	ldr	r3, [pc, #60]	; (9b8 <enable_tc1_ds+0x40>)
     97c:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     97e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     980:	b25b      	sxtb	r3, r3
     982:	2b00      	cmp	r3, #0
     984:	dbfb      	blt.n	97e <enable_tc1_ds+0x6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     986:	8813      	ldrh	r3, [r2, #0]
     988:	2102      	movs	r1, #2
     98a:	430b      	orrs	r3, r1
     98c:	8013      	strh	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     98e:	4c0a      	ldr	r4, [pc, #40]	; (9b8 <enable_tc1_ds+0x40>)
     990:	6820      	ldr	r0, [r4, #0]
     992:	4b0a      	ldr	r3, [pc, #40]	; (9bc <enable_tc1_ds+0x44>)
     994:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <enable_tc1_ds+0x48>)
     998:	5c1a      	ldrb	r2, [r3, r0]
     99a:	231f      	movs	r3, #31
     99c:	4013      	ands	r3, r2
     99e:	2201      	movs	r2, #1
     9a0:	0011      	movs	r1, r2
     9a2:	4099      	lsls	r1, r3
     9a4:	4b07      	ldr	r3, [pc, #28]	; (9c4 <enable_tc1_ds+0x4c>)
     9a6:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     9a8:	7e63      	ldrb	r3, [r4, #25]
     9aa:	2101      	movs	r1, #1
     9ac:	430b      	orrs	r3, r1
     9ae:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     9b0:	6823      	ldr	r3, [r4, #0]
     9b2:	735a      	strb	r2, [r3, #13]
	tc_enable(&tc_instance_ds);
	tc_enable_callback(&tc_instance_ds, TC_CALLBACK_OVERFLOW);
}
     9b4:	bd10      	pop	{r4, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	200000c0 	.word	0x200000c0
     9bc:	000004f5 	.word	0x000004f5
     9c0:	00001624 	.word	0x00001624
     9c4:	e000e100 	.word	0xe000e100

000009c8 <config_extint_channel_ds>:
	tc_disable_callback(&tc_instance_ds, TC_CALLBACK_OVERFLOW);
}


void config_extint_channel_ds(void)
{
     9c8:	b510      	push	{r4, lr}
     9ca:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     9cc:	ac01      	add	r4, sp, #4
     9ce:	0020      	movs	r0, r4
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <config_extint_channel_ds+0x2c>)
     9d2:	4798      	blx	r3
	config_extint_chan.gpio_pin           = ECHO_PIN_EIC;
     9d4:	2309      	movs	r3, #9
     9d6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = ECHO_PIN_MUX;
     9d8:	2390      	movs	r3, #144	; 0x90
     9da:	031b      	lsls	r3, r3, #12
     9dc:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     9de:	2302      	movs	r3, #2
     9e0:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     9e2:	3301      	adds	r3, #1
     9e4:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ECHO_EIC_LINE, &config_extint_chan);
     9e6:	0021      	movs	r1, r4
     9e8:	2007      	movs	r0, #7
     9ea:	4b03      	ldr	r3, [pc, #12]	; (9f8 <config_extint_channel_ds+0x30>)
     9ec:	4798      	blx	r3
}
     9ee:	b004      	add	sp, #16
     9f0:	bd10      	pop	{r4, pc}
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	00000371 	.word	0x00000371
     9f8:	00000385 	.word	0x00000385

000009fc <config_extint_callbacks_ds>:

void config_extint_callbacks_ds(void)
{
     9fc:	b510      	push	{r4, lr}
	extint_register_callback(echo_detection_callback,ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     9fe:	2200      	movs	r2, #0
     a00:	2107      	movs	r1, #7
     a02:	4802      	ldr	r0, [pc, #8]	; (a0c <config_extint_callbacks_ds+0x10>)
     a04:	4b02      	ldr	r3, [pc, #8]	; (a10 <config_extint_callbacks_ds+0x14>)
     a06:	4798      	blx	r3
}
     a08:	bd10      	pop	{r4, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	0000088d 	.word	0x0000088d
     a10:	00000455 	.word	0x00000455

00000a14 <config_extint_ds>:


void config_extint_ds()
{
     a14:	b510      	push	{r4, lr}
	config_extint_channel_ds();
     a16:	4b02      	ldr	r3, [pc, #8]	; (a20 <config_extint_ds+0xc>)
     a18:	4798      	blx	r3
	config_extint_callbacks_ds();
     a1a:	4b02      	ldr	r3, [pc, #8]	; (a24 <config_extint_ds+0x10>)
     a1c:	4798      	blx	r3
}
     a1e:	bd10      	pop	{r4, pc}
     a20:	000009c9 	.word	0x000009c9
     a24:	000009fd 	.word	0x000009fd

00000a28 <enable_extint_ds>:


void enable_extint_ds()
{
     a28:	b510      	push	{r4, lr}
	extint_chan_enable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     a2a:	2100      	movs	r1, #0
     a2c:	2007      	movs	r0, #7
     a2e:	4b01      	ldr	r3, [pc, #4]	; (a34 <enable_extint_ds+0xc>)
     a30:	4798      	blx	r3
}
     a32:	bd10      	pop	{r4, pc}
     a34:	00000481 	.word	0x00000481

00000a38 <config_pins_timer_ds>:
{
	extint_chan_disable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}

void config_pins_timer_ds()
{
     a38:	b510      	push	{r4, lr}
	config_pins_ds();
     a3a:	4b03      	ldr	r3, [pc, #12]	; (a48 <config_pins_timer_ds+0x10>)
     a3c:	4798      	blx	r3
	config_tc1_ds();
     a3e:	4b03      	ldr	r3, [pc, #12]	; (a4c <config_pins_timer_ds+0x14>)
     a40:	4798      	blx	r3
	tc1_callbacks_ds();
     a42:	4b03      	ldr	r3, [pc, #12]	; (a50 <config_pins_timer_ds+0x18>)
     a44:	4798      	blx	r3
	
}
     a46:	bd10      	pop	{r4, pc}
     a48:	000008d9 	.word	0x000008d9
     a4c:	0000090d 	.word	0x0000090d
     a50:	0000095d 	.word	0x0000095d

00000a54 <config_ds>:


void config_ds()
{
     a54:	b510      	push	{r4, lr}
	config_pins_timer_ds();
     a56:	4b04      	ldr	r3, [pc, #16]	; (a68 <config_ds+0x14>)
     a58:	4798      	blx	r3
	config_extint_ds();
     a5a:	4b04      	ldr	r3, [pc, #16]	; (a6c <config_ds+0x18>)
     a5c:	4798      	blx	r3
	enable_tc1_ds();
     a5e:	4b04      	ldr	r3, [pc, #16]	; (a70 <config_ds+0x1c>)
     a60:	4798      	blx	r3
	enable_extint_ds();
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <config_ds+0x20>)
     a64:	4798      	blx	r3
}
     a66:	bd10      	pop	{r4, pc}
     a68:	00000a39 	.word	0x00000a39
     a6c:	00000a15 	.word	0x00000a15
     a70:	00000979 	.word	0x00000979
     a74:	00000a29 	.word	0x00000a29

00000a78 <read_ds_digital>:
#include "timer_control.h"

uint16_t read_ds_digital()
{
	uint16_t digital_value = 0;
	while(ready_distance_digital == false );
     a78:	4a05      	ldr	r2, [pc, #20]	; (a90 <read_ds_digital+0x18>)
     a7a:	7813      	ldrb	r3, [r2, #0]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d0fc      	beq.n	a7a <read_ds_digital+0x2>
	ready_distance_digital = false;
     a80:	2200      	movs	r2, #0
     a82:	4b03      	ldr	r3, [pc, #12]	; (a90 <read_ds_digital+0x18>)
     a84:	701a      	strb	r2, [r3, #0]
	digital_value = pulse_width;
     a86:	4b03      	ldr	r3, [pc, #12]	; (a94 <read_ds_digital+0x1c>)
     a88:	8818      	ldrh	r0, [r3, #0]
     a8a:	b280      	uxth	r0, r0
	return digital_value;
}
     a8c:	4770      	bx	lr
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	2000004e 	.word	0x2000004e
     a94:	2000004c 	.word	0x2000004c

00000a98 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     a98:	1c93      	adds	r3, r2, #2
     a9a:	009b      	lsls	r3, r3, #2
     a9c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     a9e:	2a02      	cmp	r2, #2
     aa0:	d009      	beq.n	ab6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     aa2:	2a03      	cmp	r2, #3
     aa4:	d00c      	beq.n	ac0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     aa6:	2301      	movs	r3, #1
     aa8:	4093      	lsls	r3, r2
     aaa:	001a      	movs	r2, r3
     aac:	7e03      	ldrb	r3, [r0, #24]
     aae:	4313      	orrs	r3, r2
     ab0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     ab2:	2000      	movs	r0, #0
     ab4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     ab6:	7e03      	ldrb	r3, [r0, #24]
     ab8:	2210      	movs	r2, #16
     aba:	4313      	orrs	r3, r2
     abc:	7603      	strb	r3, [r0, #24]
     abe:	e7f8      	b.n	ab2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     ac0:	7e03      	ldrb	r3, [r0, #24]
     ac2:	2220      	movs	r2, #32
     ac4:	4313      	orrs	r3, r2
     ac6:	7603      	strb	r3, [r0, #24]
     ac8:	e7f3      	b.n	ab2 <tc_register_callback+0x1a>
	...

00000acc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     acc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     ace:	0080      	lsls	r0, r0, #2
     ad0:	4b16      	ldr	r3, [pc, #88]	; (b2c <_tc_interrupt_handler+0x60>)
     ad2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     ad4:	6823      	ldr	r3, [r4, #0]
     ad6:	7b9d      	ldrb	r5, [r3, #14]
     ad8:	7e22      	ldrb	r2, [r4, #24]
     ada:	7e63      	ldrb	r3, [r4, #25]
     adc:	4013      	ands	r3, r2
     ade:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     ae0:	07eb      	lsls	r3, r5, #31
     ae2:	d406      	bmi.n	af2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     ae4:	07ab      	lsls	r3, r5, #30
     ae6:	d40b      	bmi.n	b00 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     ae8:	06eb      	lsls	r3, r5, #27
     aea:	d410      	bmi.n	b0e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     aec:	06ab      	lsls	r3, r5, #26
     aee:	d415      	bmi.n	b1c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     af0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     af2:	0020      	movs	r0, r4
     af4:	68a3      	ldr	r3, [r4, #8]
     af6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     af8:	2301      	movs	r3, #1
     afa:	6822      	ldr	r2, [r4, #0]
     afc:	7393      	strb	r3, [r2, #14]
     afe:	e7f1      	b.n	ae4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     b00:	0020      	movs	r0, r4
     b02:	68e3      	ldr	r3, [r4, #12]
     b04:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     b06:	2302      	movs	r3, #2
     b08:	6822      	ldr	r2, [r4, #0]
     b0a:	7393      	strb	r3, [r2, #14]
     b0c:	e7ec      	b.n	ae8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     b0e:	0020      	movs	r0, r4
     b10:	6923      	ldr	r3, [r4, #16]
     b12:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     b14:	2310      	movs	r3, #16
     b16:	6822      	ldr	r2, [r4, #0]
     b18:	7393      	strb	r3, [r2, #14]
     b1a:	e7e7      	b.n	aec <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     b1c:	0020      	movs	r0, r4
     b1e:	6963      	ldr	r3, [r4, #20]
     b20:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     b22:	6823      	ldr	r3, [r4, #0]
     b24:	2220      	movs	r2, #32
     b26:	739a      	strb	r2, [r3, #14]
}
     b28:	e7e2      	b.n	af0 <_tc_interrupt_handler+0x24>
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	200000dc 	.word	0x200000dc

00000b30 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     b30:	b510      	push	{r4, lr}
     b32:	2000      	movs	r0, #0
     b34:	4b01      	ldr	r3, [pc, #4]	; (b3c <TC1_Handler+0xc>)
     b36:	4798      	blx	r3
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	00000acd 	.word	0x00000acd

00000b40 <TC2_Handler>:
     b40:	b510      	push	{r4, lr}
     b42:	2001      	movs	r0, #1
     b44:	4b01      	ldr	r3, [pc, #4]	; (b4c <TC2_Handler+0xc>)
     b46:	4798      	blx	r3
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00000acd 	.word	0x00000acd

00000b50 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b50:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b52:	2000      	movs	r0, #0
     b54:	4b08      	ldr	r3, [pc, #32]	; (b78 <delay_init+0x28>)
     b56:	4798      	blx	r3
     b58:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     b5a:	4c08      	ldr	r4, [pc, #32]	; (b7c <delay_init+0x2c>)
     b5c:	21fa      	movs	r1, #250	; 0xfa
     b5e:	0089      	lsls	r1, r1, #2
     b60:	47a0      	blx	r4
     b62:	4b07      	ldr	r3, [pc, #28]	; (b80 <delay_init+0x30>)
     b64:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     b66:	4907      	ldr	r1, [pc, #28]	; (b84 <delay_init+0x34>)
     b68:	0028      	movs	r0, r5
     b6a:	47a0      	blx	r4
     b6c:	4b06      	ldr	r3, [pc, #24]	; (b88 <delay_init+0x38>)
     b6e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     b70:	2205      	movs	r2, #5
     b72:	4b06      	ldr	r3, [pc, #24]	; (b8c <delay_init+0x3c>)
     b74:	601a      	str	r2, [r3, #0]
}
     b76:	bd70      	pop	{r4, r5, r6, pc}
     b78:	00000f81 	.word	0x00000f81
     b7c:	000012f1 	.word	0x000012f1
     b80:	20000000 	.word	0x20000000
     b84:	000f4240 	.word	0x000f4240
     b88:	20000004 	.word	0x20000004
     b8c:	e000e010 	.word	0xe000e010

00000b90 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     b90:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     b92:	4b08      	ldr	r3, [pc, #32]	; (bb4 <delay_cycles_us+0x24>)
     b94:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     b96:	4a08      	ldr	r2, [pc, #32]	; (bb8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     b98:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b9a:	2180      	movs	r1, #128	; 0x80
     b9c:	0249      	lsls	r1, r1, #9
	while (n--) {
     b9e:	3801      	subs	r0, #1
     ba0:	d307      	bcc.n	bb2 <delay_cycles_us+0x22>
	if (n > 0) {
     ba2:	2c00      	cmp	r4, #0
     ba4:	d0fb      	beq.n	b9e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     ba6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     ba8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     baa:	6813      	ldr	r3, [r2, #0]
     bac:	420b      	tst	r3, r1
     bae:	d0fc      	beq.n	baa <delay_cycles_us+0x1a>
     bb0:	e7f5      	b.n	b9e <delay_cycles_us+0xe>
	}
}
     bb2:	bd30      	pop	{r4, r5, pc}
     bb4:	20000004 	.word	0x20000004
     bb8:	e000e010 	.word	0xe000e010

00000bbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     bbc:	b500      	push	{lr}
     bbe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bc0:	ab01      	add	r3, sp, #4
     bc2:	2280      	movs	r2, #128	; 0x80
     bc4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bc6:	780a      	ldrb	r2, [r1, #0]
     bc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bca:	784a      	ldrb	r2, [r1, #1]
     bcc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bce:	788a      	ldrb	r2, [r1, #2]
     bd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bd2:	0019      	movs	r1, r3
     bd4:	4b01      	ldr	r3, [pc, #4]	; (bdc <port_pin_set_config+0x20>)
     bd6:	4798      	blx	r3
	
}
     bd8:	b003      	add	sp, #12
     bda:	bd00      	pop	{pc}
     bdc:	00001191 	.word	0x00001191

00000be0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     be0:	4770      	bx	lr
	...

00000be4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     be4:	4b0c      	ldr	r3, [pc, #48]	; (c18 <cpu_irq_enter_critical+0x34>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	2b00      	cmp	r3, #0
     bea:	d106      	bne.n	bfa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bf0:	2b00      	cmp	r3, #0
     bf2:	d007      	beq.n	c04 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bf4:	2200      	movs	r2, #0
     bf6:	4b09      	ldr	r3, [pc, #36]	; (c1c <cpu_irq_enter_critical+0x38>)
     bf8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bfa:	4a07      	ldr	r2, [pc, #28]	; (c18 <cpu_irq_enter_critical+0x34>)
     bfc:	6813      	ldr	r3, [r2, #0]
     bfe:	3301      	adds	r3, #1
     c00:	6013      	str	r3, [r2, #0]
}
     c02:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c04:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c06:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c0a:	2200      	movs	r2, #0
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <cpu_irq_enter_critical+0x3c>)
     c0e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c10:	3201      	adds	r2, #1
     c12:	4b02      	ldr	r3, [pc, #8]	; (c1c <cpu_irq_enter_critical+0x38>)
     c14:	701a      	strb	r2, [r3, #0]
     c16:	e7f0      	b.n	bfa <cpu_irq_enter_critical+0x16>
     c18:	2000002c 	.word	0x2000002c
     c1c:	20000030 	.word	0x20000030
     c20:	20000008 	.word	0x20000008

00000c24 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <cpu_irq_leave_critical+0x24>)
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	3a01      	subs	r2, #1
     c2a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c2c:	681b      	ldr	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d109      	bne.n	c46 <cpu_irq_leave_critical+0x22>
     c32:	4b06      	ldr	r3, [pc, #24]	; (c4c <cpu_irq_leave_critical+0x28>)
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b00      	cmp	r3, #0
     c38:	d005      	beq.n	c46 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c3a:	2201      	movs	r2, #1
     c3c:	4b04      	ldr	r3, [pc, #16]	; (c50 <cpu_irq_leave_critical+0x2c>)
     c3e:	701a      	strb	r2, [r3, #0]
     c40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c44:	b662      	cpsie	i
	}
}
     c46:	4770      	bx	lr
     c48:	2000002c 	.word	0x2000002c
     c4c:	20000030 	.word	0x20000030
     c50:	20000008 	.word	0x20000008

00000c54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c54:	b510      	push	{r4, lr}
	switch (clock_source) {
     c56:	2808      	cmp	r0, #8
     c58:	d803      	bhi.n	c62 <system_clock_source_get_hz+0xe>
     c5a:	0080      	lsls	r0, r0, #2
     c5c:	4b1b      	ldr	r3, [pc, #108]	; (ccc <system_clock_source_get_hz+0x78>)
     c5e:	581b      	ldr	r3, [r3, r0]
     c60:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     c62:	2000      	movs	r0, #0
     c64:	e030      	b.n	cc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     c66:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <system_clock_source_get_hz+0x7c>)
     c68:	6918      	ldr	r0, [r3, #16]
     c6a:	e02d      	b.n	cc8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c6c:	4b19      	ldr	r3, [pc, #100]	; (cd4 <system_clock_source_get_hz+0x80>)
     c6e:	6a1b      	ldr	r3, [r3, #32]
     c70:	059b      	lsls	r3, r3, #22
     c72:	0f9b      	lsrs	r3, r3, #30
     c74:	4818      	ldr	r0, [pc, #96]	; (cd8 <system_clock_source_get_hz+0x84>)
     c76:	40d8      	lsrs	r0, r3
     c78:	e026      	b.n	cc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     c7a:	4b15      	ldr	r3, [pc, #84]	; (cd0 <system_clock_source_get_hz+0x7c>)
     c7c:	6958      	ldr	r0, [r3, #20]
     c7e:	e023      	b.n	cc8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c80:	4b13      	ldr	r3, [pc, #76]	; (cd0 <system_clock_source_get_hz+0x7c>)
     c82:	681b      	ldr	r3, [r3, #0]
			return 0;
     c84:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c86:	079b      	lsls	r3, r3, #30
     c88:	d51e      	bpl.n	cc8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c8a:	4912      	ldr	r1, [pc, #72]	; (cd4 <system_clock_source_get_hz+0x80>)
     c8c:	2210      	movs	r2, #16
     c8e:	68cb      	ldr	r3, [r1, #12]
     c90:	421a      	tst	r2, r3
     c92:	d0fc      	beq.n	c8e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     c94:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <system_clock_source_get_hz+0x7c>)
     c96:	681b      	ldr	r3, [r3, #0]
     c98:	075b      	lsls	r3, r3, #29
     c9a:	d401      	bmi.n	ca0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     c9c:	480f      	ldr	r0, [pc, #60]	; (cdc <system_clock_source_get_hz+0x88>)
     c9e:	e013      	b.n	cc8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ca0:	2000      	movs	r0, #0
     ca2:	4b0f      	ldr	r3, [pc, #60]	; (ce0 <system_clock_source_get_hz+0x8c>)
     ca4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     ca6:	4b0a      	ldr	r3, [pc, #40]	; (cd0 <system_clock_source_get_hz+0x7c>)
     ca8:	689b      	ldr	r3, [r3, #8]
     caa:	041b      	lsls	r3, r3, #16
     cac:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cae:	4358      	muls	r0, r3
     cb0:	e00a      	b.n	cc8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cb2:	2350      	movs	r3, #80	; 0x50
     cb4:	4a07      	ldr	r2, [pc, #28]	; (cd4 <system_clock_source_get_hz+0x80>)
     cb6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     cb8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cba:	075b      	lsls	r3, r3, #29
     cbc:	d504      	bpl.n	cc8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     cbe:	4b04      	ldr	r3, [pc, #16]	; (cd0 <system_clock_source_get_hz+0x7c>)
     cc0:	68d8      	ldr	r0, [r3, #12]
     cc2:	e001      	b.n	cc8 <system_clock_source_get_hz+0x74>
		return 32768UL;
     cc4:	2080      	movs	r0, #128	; 0x80
     cc6:	0200      	lsls	r0, r0, #8
	}
}
     cc8:	bd10      	pop	{r4, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	00001628 	.word	0x00001628
     cd0:	20000034 	.word	0x20000034
     cd4:	40000800 	.word	0x40000800
     cd8:	007a1200 	.word	0x007a1200
     cdc:	02dc6c00 	.word	0x02dc6c00
     ce0:	000010b5 	.word	0x000010b5

00000ce4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ce4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ce6:	490c      	ldr	r1, [pc, #48]	; (d18 <system_clock_source_osc8m_set_config+0x34>)
     ce8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     cea:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     cec:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     cee:	7840      	ldrb	r0, [r0, #1]
     cf0:	2201      	movs	r2, #1
     cf2:	4010      	ands	r0, r2
     cf4:	0180      	lsls	r0, r0, #6
     cf6:	2640      	movs	r6, #64	; 0x40
     cf8:	43b3      	bics	r3, r6
     cfa:	4303      	orrs	r3, r0
     cfc:	402a      	ands	r2, r5
     cfe:	01d2      	lsls	r2, r2, #7
     d00:	2080      	movs	r0, #128	; 0x80
     d02:	4383      	bics	r3, r0
     d04:	4313      	orrs	r3, r2
     d06:	2203      	movs	r2, #3
     d08:	4022      	ands	r2, r4
     d0a:	0212      	lsls	r2, r2, #8
     d0c:	4803      	ldr	r0, [pc, #12]	; (d1c <system_clock_source_osc8m_set_config+0x38>)
     d0e:	4003      	ands	r3, r0
     d10:	4313      	orrs	r3, r2
     d12:	620b      	str	r3, [r1, #32]
}
     d14:	bd70      	pop	{r4, r5, r6, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	40000800 	.word	0x40000800
     d1c:	fffffcff 	.word	0xfffffcff

00000d20 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d20:	2808      	cmp	r0, #8
     d22:	d803      	bhi.n	d2c <system_clock_source_enable+0xc>
     d24:	0080      	lsls	r0, r0, #2
     d26:	4b25      	ldr	r3, [pc, #148]	; (dbc <system_clock_source_enable+0x9c>)
     d28:	581b      	ldr	r3, [r3, r0]
     d2a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d2c:	2017      	movs	r0, #23
     d2e:	e044      	b.n	dba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d30:	4a23      	ldr	r2, [pc, #140]	; (dc0 <system_clock_source_enable+0xa0>)
     d32:	6a13      	ldr	r3, [r2, #32]
     d34:	2102      	movs	r1, #2
     d36:	430b      	orrs	r3, r1
     d38:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d3a:	2000      	movs	r0, #0
     d3c:	e03d      	b.n	dba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d3e:	4a20      	ldr	r2, [pc, #128]	; (dc0 <system_clock_source_enable+0xa0>)
     d40:	6993      	ldr	r3, [r2, #24]
     d42:	2102      	movs	r1, #2
     d44:	430b      	orrs	r3, r1
     d46:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d48:	2000      	movs	r0, #0
		break;
     d4a:	e036      	b.n	dba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d4c:	4a1c      	ldr	r2, [pc, #112]	; (dc0 <system_clock_source_enable+0xa0>)
     d4e:	8a13      	ldrh	r3, [r2, #16]
     d50:	2102      	movs	r1, #2
     d52:	430b      	orrs	r3, r1
     d54:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     d56:	2000      	movs	r0, #0
		break;
     d58:	e02f      	b.n	dba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d5a:	4a19      	ldr	r2, [pc, #100]	; (dc0 <system_clock_source_enable+0xa0>)
     d5c:	8a93      	ldrh	r3, [r2, #20]
     d5e:	2102      	movs	r1, #2
     d60:	430b      	orrs	r3, r1
     d62:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     d64:	2000      	movs	r0, #0
		break;
     d66:	e028      	b.n	dba <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d68:	4916      	ldr	r1, [pc, #88]	; (dc4 <system_clock_source_enable+0xa4>)
     d6a:	680b      	ldr	r3, [r1, #0]
     d6c:	2202      	movs	r2, #2
     d6e:	4313      	orrs	r3, r2
     d70:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     d72:	4b13      	ldr	r3, [pc, #76]	; (dc0 <system_clock_source_enable+0xa0>)
     d74:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d76:	0019      	movs	r1, r3
     d78:	320e      	adds	r2, #14
     d7a:	68cb      	ldr	r3, [r1, #12]
     d7c:	421a      	tst	r2, r3
     d7e:	d0fc      	beq.n	d7a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     d80:	4a10      	ldr	r2, [pc, #64]	; (dc4 <system_clock_source_enable+0xa4>)
     d82:	6891      	ldr	r1, [r2, #8]
     d84:	4b0e      	ldr	r3, [pc, #56]	; (dc0 <system_clock_source_enable+0xa0>)
     d86:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     d88:	6852      	ldr	r2, [r2, #4]
     d8a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     d8c:	2200      	movs	r2, #0
     d8e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d90:	0019      	movs	r1, r3
     d92:	3210      	adds	r2, #16
     d94:	68cb      	ldr	r3, [r1, #12]
     d96:	421a      	tst	r2, r3
     d98:	d0fc      	beq.n	d94 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     d9a:	4b0a      	ldr	r3, [pc, #40]	; (dc4 <system_clock_source_enable+0xa4>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	b29b      	uxth	r3, r3
     da0:	4a07      	ldr	r2, [pc, #28]	; (dc0 <system_clock_source_enable+0xa0>)
     da2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     da4:	2000      	movs	r0, #0
     da6:	e008      	b.n	dba <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     da8:	4905      	ldr	r1, [pc, #20]	; (dc0 <system_clock_source_enable+0xa0>)
     daa:	2244      	movs	r2, #68	; 0x44
     dac:	5c8b      	ldrb	r3, [r1, r2]
     dae:	2002      	movs	r0, #2
     db0:	4303      	orrs	r3, r0
     db2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     db4:	2000      	movs	r0, #0
		break;
     db6:	e000      	b.n	dba <system_clock_source_enable+0x9a>
		return STATUS_OK;
     db8:	2000      	movs	r0, #0
}
     dba:	4770      	bx	lr
     dbc:	0000164c 	.word	0x0000164c
     dc0:	40000800 	.word	0x40000800
     dc4:	20000034 	.word	0x20000034

00000dc8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     dc8:	b530      	push	{r4, r5, lr}
     dca:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dcc:	22c2      	movs	r2, #194	; 0xc2
     dce:	00d2      	lsls	r2, r2, #3
     dd0:	4b1a      	ldr	r3, [pc, #104]	; (e3c <system_clock_init+0x74>)
     dd2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     dd4:	4a1a      	ldr	r2, [pc, #104]	; (e40 <system_clock_init+0x78>)
     dd6:	6853      	ldr	r3, [r2, #4]
     dd8:	211e      	movs	r1, #30
     dda:	438b      	bics	r3, r1
     ddc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     dde:	2301      	movs	r3, #1
     de0:	466a      	mov	r2, sp
     de2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     de4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     de6:	4d17      	ldr	r5, [pc, #92]	; (e44 <system_clock_init+0x7c>)
     de8:	b2e0      	uxtb	r0, r4
     dea:	4669      	mov	r1, sp
     dec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     dee:	3401      	adds	r4, #1
     df0:	2c18      	cmp	r4, #24
     df2:	d1f9      	bne.n	de8 <system_clock_init+0x20>
	config->run_in_standby  = false;
     df4:	a803      	add	r0, sp, #12
     df6:	2400      	movs	r4, #0
     df8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     dfa:	2501      	movs	r5, #1
     dfc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     dfe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e00:	4b11      	ldr	r3, [pc, #68]	; (e48 <system_clock_init+0x80>)
     e02:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e04:	2006      	movs	r0, #6
     e06:	4b11      	ldr	r3, [pc, #68]	; (e4c <system_clock_init+0x84>)
     e08:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e0a:	4b11      	ldr	r3, [pc, #68]	; (e50 <system_clock_init+0x88>)
     e0c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e0e:	4b11      	ldr	r3, [pc, #68]	; (e54 <system_clock_init+0x8c>)
     e10:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e12:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e14:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e16:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     e18:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e1a:	466b      	mov	r3, sp
     e1c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e1e:	2306      	movs	r3, #6
     e20:	466a      	mov	r2, sp
     e22:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     e24:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e26:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e28:	4669      	mov	r1, sp
     e2a:	2000      	movs	r0, #0
     e2c:	4b0a      	ldr	r3, [pc, #40]	; (e58 <system_clock_init+0x90>)
     e2e:	4798      	blx	r3
     e30:	2000      	movs	r0, #0
     e32:	4b0a      	ldr	r3, [pc, #40]	; (e5c <system_clock_init+0x94>)
     e34:	4798      	blx	r3
#endif
}
     e36:	b005      	add	sp, #20
     e38:	bd30      	pop	{r4, r5, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	40000800 	.word	0x40000800
     e40:	41004000 	.word	0x41004000
     e44:	00001099 	.word	0x00001099
     e48:	00000ce5 	.word	0x00000ce5
     e4c:	00000d21 	.word	0x00000d21
     e50:	00000e61 	.word	0x00000e61
     e54:	40000400 	.word	0x40000400
     e58:	00000e85 	.word	0x00000e85
     e5c:	00000f3d 	.word	0x00000f3d

00000e60 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     e60:	4a06      	ldr	r2, [pc, #24]	; (e7c <system_gclk_init+0x1c>)
     e62:	6993      	ldr	r3, [r2, #24]
     e64:	2108      	movs	r1, #8
     e66:	430b      	orrs	r3, r1
     e68:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e6a:	2201      	movs	r2, #1
     e6c:	4b04      	ldr	r3, [pc, #16]	; (e80 <system_gclk_init+0x20>)
     e6e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e70:	0019      	movs	r1, r3
     e72:	780b      	ldrb	r3, [r1, #0]
     e74:	4213      	tst	r3, r2
     e76:	d1fc      	bne.n	e72 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e78:	4770      	bx	lr
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	40000400 	.word	0x40000400
     e80:	40000c00 	.word	0x40000c00

00000e84 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e84:	b570      	push	{r4, r5, r6, lr}
     e86:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e88:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e8a:	780d      	ldrb	r5, [r1, #0]
     e8c:	022d      	lsls	r5, r5, #8
     e8e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e90:	784b      	ldrb	r3, [r1, #1]
     e92:	2b00      	cmp	r3, #0
     e94:	d002      	beq.n	e9c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e96:	2380      	movs	r3, #128	; 0x80
     e98:	02db      	lsls	r3, r3, #11
     e9a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e9c:	7a4b      	ldrb	r3, [r1, #9]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d002      	beq.n	ea8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ea2:	2380      	movs	r3, #128	; 0x80
     ea4:	031b      	lsls	r3, r3, #12
     ea6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ea8:	6848      	ldr	r0, [r1, #4]
     eaa:	2801      	cmp	r0, #1
     eac:	d910      	bls.n	ed0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     eae:	1e43      	subs	r3, r0, #1
     eb0:	4218      	tst	r0, r3
     eb2:	d134      	bne.n	f1e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     eb4:	2802      	cmp	r0, #2
     eb6:	d930      	bls.n	f1a <system_gclk_gen_set_config+0x96>
     eb8:	2302      	movs	r3, #2
     eba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     ebc:	3201      	adds	r2, #1
						mask <<= 1) {
     ebe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     ec0:	4298      	cmp	r0, r3
     ec2:	d8fb      	bhi.n	ebc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     ec4:	0212      	lsls	r2, r2, #8
     ec6:	4332      	orrs	r2, r6
     ec8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     eca:	2380      	movs	r3, #128	; 0x80
     ecc:	035b      	lsls	r3, r3, #13
     ece:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     ed0:	7a0b      	ldrb	r3, [r1, #8]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d002      	beq.n	edc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     ed6:	2380      	movs	r3, #128	; 0x80
     ed8:	039b      	lsls	r3, r3, #14
     eda:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     edc:	4a13      	ldr	r2, [pc, #76]	; (f2c <system_gclk_gen_set_config+0xa8>)
     ede:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     ee0:	b25b      	sxtb	r3, r3
     ee2:	2b00      	cmp	r3, #0
     ee4:	dbfb      	blt.n	ede <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     ee6:	4b12      	ldr	r3, [pc, #72]	; (f30 <system_gclk_gen_set_config+0xac>)
     ee8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     eea:	4b12      	ldr	r3, [pc, #72]	; (f34 <system_gclk_gen_set_config+0xb0>)
     eec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eee:	4a0f      	ldr	r2, [pc, #60]	; (f2c <system_gclk_gen_set_config+0xa8>)
     ef0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     ef2:	b25b      	sxtb	r3, r3
     ef4:	2b00      	cmp	r3, #0
     ef6:	dbfb      	blt.n	ef0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     ef8:	4b0c      	ldr	r3, [pc, #48]	; (f2c <system_gclk_gen_set_config+0xa8>)
     efa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     efc:	001a      	movs	r2, r3
     efe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f00:	b25b      	sxtb	r3, r3
     f02:	2b00      	cmp	r3, #0
     f04:	dbfb      	blt.n	efe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f06:	4a09      	ldr	r2, [pc, #36]	; (f2c <system_gclk_gen_set_config+0xa8>)
     f08:	6853      	ldr	r3, [r2, #4]
     f0a:	2180      	movs	r1, #128	; 0x80
     f0c:	0249      	lsls	r1, r1, #9
     f0e:	400b      	ands	r3, r1
     f10:	431d      	orrs	r5, r3
     f12:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     f14:	4b08      	ldr	r3, [pc, #32]	; (f38 <system_gclk_gen_set_config+0xb4>)
     f16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f18:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f1a:	2200      	movs	r2, #0
     f1c:	e7d2      	b.n	ec4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f1e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f20:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f22:	2380      	movs	r3, #128	; 0x80
     f24:	029b      	lsls	r3, r3, #10
     f26:	431d      	orrs	r5, r3
     f28:	e7d2      	b.n	ed0 <system_gclk_gen_set_config+0x4c>
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	40000c00 	.word	0x40000c00
     f30:	00000be5 	.word	0x00000be5
     f34:	40000c08 	.word	0x40000c08
     f38:	00000c25 	.word	0x00000c25

00000f3c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f3c:	b510      	push	{r4, lr}
     f3e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f40:	4a0b      	ldr	r2, [pc, #44]	; (f70 <system_gclk_gen_enable+0x34>)
     f42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f44:	b25b      	sxtb	r3, r3
     f46:	2b00      	cmp	r3, #0
     f48:	dbfb      	blt.n	f42 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     f4a:	4b0a      	ldr	r3, [pc, #40]	; (f74 <system_gclk_gen_enable+0x38>)
     f4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f4e:	4b0a      	ldr	r3, [pc, #40]	; (f78 <system_gclk_gen_enable+0x3c>)
     f50:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f52:	4a07      	ldr	r2, [pc, #28]	; (f70 <system_gclk_gen_enable+0x34>)
     f54:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f56:	b25b      	sxtb	r3, r3
     f58:	2b00      	cmp	r3, #0
     f5a:	dbfb      	blt.n	f54 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f5c:	4a04      	ldr	r2, [pc, #16]	; (f70 <system_gclk_gen_enable+0x34>)
     f5e:	6851      	ldr	r1, [r2, #4]
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	025b      	lsls	r3, r3, #9
     f64:	430b      	orrs	r3, r1
     f66:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <system_gclk_gen_enable+0x40>)
     f6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	40000c00 	.word	0x40000c00
     f74:	00000be5 	.word	0x00000be5
     f78:	40000c04 	.word	0x40000c04
     f7c:	00000c25 	.word	0x00000c25

00000f80 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f84:	4a1a      	ldr	r2, [pc, #104]	; (ff0 <system_gclk_gen_get_hz+0x70>)
     f86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f88:	b25b      	sxtb	r3, r3
     f8a:	2b00      	cmp	r3, #0
     f8c:	dbfb      	blt.n	f86 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     f8e:	4b19      	ldr	r3, [pc, #100]	; (ff4 <system_gclk_gen_get_hz+0x74>)
     f90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f92:	4b19      	ldr	r3, [pc, #100]	; (ff8 <system_gclk_gen_get_hz+0x78>)
     f94:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f96:	4a16      	ldr	r2, [pc, #88]	; (ff0 <system_gclk_gen_get_hz+0x70>)
     f98:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f9a:	b25b      	sxtb	r3, r3
     f9c:	2b00      	cmp	r3, #0
     f9e:	dbfb      	blt.n	f98 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fa0:	4e13      	ldr	r6, [pc, #76]	; (ff0 <system_gclk_gen_get_hz+0x70>)
     fa2:	6870      	ldr	r0, [r6, #4]
     fa4:	04c0      	lsls	r0, r0, #19
     fa6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fa8:	4b14      	ldr	r3, [pc, #80]	; (ffc <system_gclk_gen_get_hz+0x7c>)
     faa:	4798      	blx	r3
     fac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fae:	4b12      	ldr	r3, [pc, #72]	; (ff8 <system_gclk_gen_get_hz+0x78>)
     fb0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     fb2:	6876      	ldr	r6, [r6, #4]
     fb4:	02f6      	lsls	r6, r6, #11
     fb6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fb8:	4b11      	ldr	r3, [pc, #68]	; (1000 <system_gclk_gen_get_hz+0x80>)
     fba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fbc:	4a0c      	ldr	r2, [pc, #48]	; (ff0 <system_gclk_gen_get_hz+0x70>)
     fbe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fc0:	b25b      	sxtb	r3, r3
     fc2:	2b00      	cmp	r3, #0
     fc4:	dbfb      	blt.n	fbe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fc6:	4b0a      	ldr	r3, [pc, #40]	; (ff0 <system_gclk_gen_get_hz+0x70>)
     fc8:	689c      	ldr	r4, [r3, #8]
     fca:	0224      	lsls	r4, r4, #8
     fcc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     fce:	4b0d      	ldr	r3, [pc, #52]	; (1004 <system_gclk_gen_get_hz+0x84>)
     fd0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     fd2:	2e00      	cmp	r6, #0
     fd4:	d107      	bne.n	fe6 <system_gclk_gen_get_hz+0x66>
     fd6:	2c01      	cmp	r4, #1
     fd8:	d907      	bls.n	fea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     fda:	0021      	movs	r1, r4
     fdc:	0028      	movs	r0, r5
     fde:	4b0a      	ldr	r3, [pc, #40]	; (1008 <system_gclk_gen_get_hz+0x88>)
     fe0:	4798      	blx	r3
     fe2:	0005      	movs	r5, r0
     fe4:	e001      	b.n	fea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     fe6:	3401      	adds	r4, #1
     fe8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     fea:	0028      	movs	r0, r5
     fec:	bd70      	pop	{r4, r5, r6, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	40000c00 	.word	0x40000c00
     ff4:	00000be5 	.word	0x00000be5
     ff8:	40000c04 	.word	0x40000c04
     ffc:	00000c55 	.word	0x00000c55
    1000:	40000c08 	.word	0x40000c08
    1004:	00000c25 	.word	0x00000c25
    1008:	000012f1 	.word	0x000012f1

0000100c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    100c:	b510      	push	{r4, lr}
    100e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1010:	4b06      	ldr	r3, [pc, #24]	; (102c <system_gclk_chan_enable+0x20>)
    1012:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1014:	4b06      	ldr	r3, [pc, #24]	; (1030 <system_gclk_chan_enable+0x24>)
    1016:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1018:	4a06      	ldr	r2, [pc, #24]	; (1034 <system_gclk_chan_enable+0x28>)
    101a:	8853      	ldrh	r3, [r2, #2]
    101c:	2180      	movs	r1, #128	; 0x80
    101e:	01c9      	lsls	r1, r1, #7
    1020:	430b      	orrs	r3, r1
    1022:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <system_gclk_chan_enable+0x2c>)
    1026:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1028:	bd10      	pop	{r4, pc}
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	00000be5 	.word	0x00000be5
    1030:	40000c02 	.word	0x40000c02
    1034:	40000c00 	.word	0x40000c00
    1038:	00000c25 	.word	0x00000c25

0000103c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    103c:	b510      	push	{r4, lr}
    103e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1040:	4b0f      	ldr	r3, [pc, #60]	; (1080 <system_gclk_chan_disable+0x44>)
    1042:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1044:	4b0f      	ldr	r3, [pc, #60]	; (1084 <system_gclk_chan_disable+0x48>)
    1046:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1048:	4a0f      	ldr	r2, [pc, #60]	; (1088 <system_gclk_chan_disable+0x4c>)
    104a:	8853      	ldrh	r3, [r2, #2]
    104c:	051b      	lsls	r3, r3, #20
    104e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1050:	8853      	ldrh	r3, [r2, #2]
    1052:	490e      	ldr	r1, [pc, #56]	; (108c <system_gclk_chan_disable+0x50>)
    1054:	400b      	ands	r3, r1
    1056:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1058:	8853      	ldrh	r3, [r2, #2]
    105a:	490d      	ldr	r1, [pc, #52]	; (1090 <system_gclk_chan_disable+0x54>)
    105c:	400b      	ands	r3, r1
    105e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1060:	0011      	movs	r1, r2
    1062:	2280      	movs	r2, #128	; 0x80
    1064:	01d2      	lsls	r2, r2, #7
    1066:	884b      	ldrh	r3, [r1, #2]
    1068:	4213      	tst	r3, r2
    106a:	d1fc      	bne.n	1066 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    106c:	4906      	ldr	r1, [pc, #24]	; (1088 <system_gclk_chan_disable+0x4c>)
    106e:	884a      	ldrh	r2, [r1, #2]
    1070:	0203      	lsls	r3, r0, #8
    1072:	4806      	ldr	r0, [pc, #24]	; (108c <system_gclk_chan_disable+0x50>)
    1074:	4002      	ands	r2, r0
    1076:	4313      	orrs	r3, r2
    1078:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    107a:	4b06      	ldr	r3, [pc, #24]	; (1094 <system_gclk_chan_disable+0x58>)
    107c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    107e:	bd10      	pop	{r4, pc}
    1080:	00000be5 	.word	0x00000be5
    1084:	40000c02 	.word	0x40000c02
    1088:	40000c00 	.word	0x40000c00
    108c:	fffff0ff 	.word	0xfffff0ff
    1090:	ffffbfff 	.word	0xffffbfff
    1094:	00000c25 	.word	0x00000c25

00001098 <system_gclk_chan_set_config>:
{
    1098:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    109a:	780c      	ldrb	r4, [r1, #0]
    109c:	0224      	lsls	r4, r4, #8
    109e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <system_gclk_chan_set_config+0x14>)
    10a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10a4:	b2a4      	uxth	r4, r4
    10a6:	4b02      	ldr	r3, [pc, #8]	; (10b0 <system_gclk_chan_set_config+0x18>)
    10a8:	805c      	strh	r4, [r3, #2]
}
    10aa:	bd10      	pop	{r4, pc}
    10ac:	0000103d 	.word	0x0000103d
    10b0:	40000c00 	.word	0x40000c00

000010b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10b4:	b510      	push	{r4, lr}
    10b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10b8:	4b06      	ldr	r3, [pc, #24]	; (10d4 <system_gclk_chan_get_hz+0x20>)
    10ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <system_gclk_chan_get_hz+0x24>)
    10be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    10c0:	4b06      	ldr	r3, [pc, #24]	; (10dc <system_gclk_chan_get_hz+0x28>)
    10c2:	885c      	ldrh	r4, [r3, #2]
    10c4:	0524      	lsls	r4, r4, #20
    10c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <system_gclk_chan_get_hz+0x2c>)
    10ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10cc:	0020      	movs	r0, r4
    10ce:	4b05      	ldr	r3, [pc, #20]	; (10e4 <system_gclk_chan_get_hz+0x30>)
    10d0:	4798      	blx	r3
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	00000be5 	.word	0x00000be5
    10d8:	40000c02 	.word	0x40000c02
    10dc:	40000c00 	.word	0x40000c00
    10e0:	00000c25 	.word	0x00000c25
    10e4:	00000f81 	.word	0x00000f81

000010e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    10e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    10ea:	78d3      	ldrb	r3, [r2, #3]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d135      	bne.n	115c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    10f0:	7813      	ldrb	r3, [r2, #0]
    10f2:	2b80      	cmp	r3, #128	; 0x80
    10f4:	d029      	beq.n	114a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    10f6:	061b      	lsls	r3, r3, #24
    10f8:	2480      	movs	r4, #128	; 0x80
    10fa:	0264      	lsls	r4, r4, #9
    10fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    10fe:	7854      	ldrb	r4, [r2, #1]
    1100:	2502      	movs	r5, #2
    1102:	43ac      	bics	r4, r5
    1104:	d106      	bne.n	1114 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1106:	7894      	ldrb	r4, [r2, #2]
    1108:	2c00      	cmp	r4, #0
    110a:	d120      	bne.n	114e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    110c:	2480      	movs	r4, #128	; 0x80
    110e:	02a4      	lsls	r4, r4, #10
    1110:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1112:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1114:	7854      	ldrb	r4, [r2, #1]
    1116:	3c01      	subs	r4, #1
    1118:	2c01      	cmp	r4, #1
    111a:	d91c      	bls.n	1156 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    111c:	040d      	lsls	r5, r1, #16
    111e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1120:	24a0      	movs	r4, #160	; 0xa0
    1122:	05e4      	lsls	r4, r4, #23
    1124:	432c      	orrs	r4, r5
    1126:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1128:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    112a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    112c:	24d0      	movs	r4, #208	; 0xd0
    112e:	0624      	lsls	r4, r4, #24
    1130:	432c      	orrs	r4, r5
    1132:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1134:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1136:	78d4      	ldrb	r4, [r2, #3]
    1138:	2c00      	cmp	r4, #0
    113a:	d122      	bne.n	1182 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    113c:	035b      	lsls	r3, r3, #13
    113e:	d51c      	bpl.n	117a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1140:	7893      	ldrb	r3, [r2, #2]
    1142:	2b01      	cmp	r3, #1
    1144:	d01e      	beq.n	1184 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1146:	6141      	str	r1, [r0, #20]
    1148:	e017      	b.n	117a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    114a:	2300      	movs	r3, #0
    114c:	e7d7      	b.n	10fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    114e:	24c0      	movs	r4, #192	; 0xc0
    1150:	02e4      	lsls	r4, r4, #11
    1152:	4323      	orrs	r3, r4
    1154:	e7dd      	b.n	1112 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1156:	4c0d      	ldr	r4, [pc, #52]	; (118c <_system_pinmux_config+0xa4>)
    1158:	4023      	ands	r3, r4
    115a:	e7df      	b.n	111c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    115c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    115e:	040c      	lsls	r4, r1, #16
    1160:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1162:	23a0      	movs	r3, #160	; 0xa0
    1164:	05db      	lsls	r3, r3, #23
    1166:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1168:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    116a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    116c:	23d0      	movs	r3, #208	; 0xd0
    116e:	061b      	lsls	r3, r3, #24
    1170:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1172:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1174:	78d3      	ldrb	r3, [r2, #3]
    1176:	2b00      	cmp	r3, #0
    1178:	d103      	bne.n	1182 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    117a:	7853      	ldrb	r3, [r2, #1]
    117c:	3b01      	subs	r3, #1
    117e:	2b01      	cmp	r3, #1
    1180:	d902      	bls.n	1188 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1182:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1184:	6181      	str	r1, [r0, #24]
    1186:	e7f8      	b.n	117a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1188:	6081      	str	r1, [r0, #8]
}
    118a:	e7fa      	b.n	1182 <_system_pinmux_config+0x9a>
    118c:	fffbffff 	.word	0xfffbffff

00001190 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1190:	b510      	push	{r4, lr}
    1192:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1194:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1196:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1198:	2900      	cmp	r1, #0
    119a:	d104      	bne.n	11a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    119c:	0943      	lsrs	r3, r0, #5
    119e:	01db      	lsls	r3, r3, #7
    11a0:	4905      	ldr	r1, [pc, #20]	; (11b8 <system_pinmux_pin_set_config+0x28>)
    11a2:	468c      	mov	ip, r1
    11a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11a6:	241f      	movs	r4, #31
    11a8:	4020      	ands	r0, r4
    11aa:	2101      	movs	r1, #1
    11ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    11ae:	0018      	movs	r0, r3
    11b0:	4b02      	ldr	r3, [pc, #8]	; (11bc <system_pinmux_pin_set_config+0x2c>)
    11b2:	4798      	blx	r3
}
    11b4:	bd10      	pop	{r4, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	41004400 	.word	0x41004400
    11bc:	000010e9 	.word	0x000010e9

000011c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    11c0:	4770      	bx	lr
	...

000011c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    11c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <system_init+0x18>)
    11c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <system_init+0x1c>)
    11cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <system_init+0x20>)
    11d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    11d2:	4b05      	ldr	r3, [pc, #20]	; (11e8 <system_init+0x24>)
    11d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    11d6:	4b05      	ldr	r3, [pc, #20]	; (11ec <system_init+0x28>)
    11d8:	4798      	blx	r3
}
    11da:	bd10      	pop	{r4, pc}
    11dc:	00000dc9 	.word	0x00000dc9
    11e0:	00000be1 	.word	0x00000be1
    11e4:	000011c1 	.word	0x000011c1
    11e8:	00000305 	.word	0x00000305
    11ec:	000011c1 	.word	0x000011c1

000011f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11f0:	e7fe      	b.n	11f0 <Dummy_Handler>
	...

000011f4 <Reset_Handler>:
{
    11f4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    11f6:	4a26      	ldr	r2, [pc, #152]	; (1290 <Reset_Handler+0x9c>)
    11f8:	4b26      	ldr	r3, [pc, #152]	; (1294 <Reset_Handler+0xa0>)
    11fa:	429a      	cmp	r2, r3
    11fc:	d011      	beq.n	1222 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    11fe:	001a      	movs	r2, r3
    1200:	4b25      	ldr	r3, [pc, #148]	; (1298 <Reset_Handler+0xa4>)
    1202:	429a      	cmp	r2, r3
    1204:	d20d      	bcs.n	1222 <Reset_Handler+0x2e>
    1206:	4a25      	ldr	r2, [pc, #148]	; (129c <Reset_Handler+0xa8>)
    1208:	3303      	adds	r3, #3
    120a:	1a9b      	subs	r3, r3, r2
    120c:	089b      	lsrs	r3, r3, #2
    120e:	3301      	adds	r3, #1
    1210:	009b      	lsls	r3, r3, #2
    1212:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1214:	481f      	ldr	r0, [pc, #124]	; (1294 <Reset_Handler+0xa0>)
    1216:	491e      	ldr	r1, [pc, #120]	; (1290 <Reset_Handler+0x9c>)
    1218:	588c      	ldr	r4, [r1, r2]
    121a:	5084      	str	r4, [r0, r2]
    121c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    121e:	429a      	cmp	r2, r3
    1220:	d1fa      	bne.n	1218 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1222:	4a1f      	ldr	r2, [pc, #124]	; (12a0 <Reset_Handler+0xac>)
    1224:	4b1f      	ldr	r3, [pc, #124]	; (12a4 <Reset_Handler+0xb0>)
    1226:	429a      	cmp	r2, r3
    1228:	d20a      	bcs.n	1240 <Reset_Handler+0x4c>
    122a:	43d3      	mvns	r3, r2
    122c:	491d      	ldr	r1, [pc, #116]	; (12a4 <Reset_Handler+0xb0>)
    122e:	185b      	adds	r3, r3, r1
    1230:	2103      	movs	r1, #3
    1232:	438b      	bics	r3, r1
    1234:	3304      	adds	r3, #4
    1236:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1238:	2100      	movs	r1, #0
    123a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    123c:	4293      	cmp	r3, r2
    123e:	d1fc      	bne.n	123a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1240:	4a19      	ldr	r2, [pc, #100]	; (12a8 <Reset_Handler+0xb4>)
    1242:	21ff      	movs	r1, #255	; 0xff
    1244:	4b19      	ldr	r3, [pc, #100]	; (12ac <Reset_Handler+0xb8>)
    1246:	438b      	bics	r3, r1
    1248:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    124a:	39fd      	subs	r1, #253	; 0xfd
    124c:	2390      	movs	r3, #144	; 0x90
    124e:	005b      	lsls	r3, r3, #1
    1250:	4a17      	ldr	r2, [pc, #92]	; (12b0 <Reset_Handler+0xbc>)
    1252:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1254:	4b17      	ldr	r3, [pc, #92]	; (12b4 <Reset_Handler+0xc0>)
    1256:	7b9a      	ldrb	r2, [r3, #14]
    1258:	312e      	adds	r1, #46	; 0x2e
    125a:	438a      	bics	r2, r1
    125c:	2120      	movs	r1, #32
    125e:	430a      	orrs	r2, r1
    1260:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1262:	7b9a      	ldrb	r2, [r3, #14]
    1264:	210c      	movs	r1, #12
    1266:	438a      	bics	r2, r1
    1268:	2108      	movs	r1, #8
    126a:	430a      	orrs	r2, r1
    126c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    126e:	7b9a      	ldrb	r2, [r3, #14]
    1270:	2103      	movs	r1, #3
    1272:	438a      	bics	r2, r1
    1274:	2102      	movs	r1, #2
    1276:	430a      	orrs	r2, r1
    1278:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    127a:	4a0f      	ldr	r2, [pc, #60]	; (12b8 <Reset_Handler+0xc4>)
    127c:	6853      	ldr	r3, [r2, #4]
    127e:	2180      	movs	r1, #128	; 0x80
    1280:	430b      	orrs	r3, r1
    1282:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1284:	4b0d      	ldr	r3, [pc, #52]	; (12bc <Reset_Handler+0xc8>)
    1286:	4798      	blx	r3
        main();
    1288:	4b0d      	ldr	r3, [pc, #52]	; (12c0 <Reset_Handler+0xcc>)
    128a:	4798      	blx	r3
    128c:	e7fe      	b.n	128c <Reset_Handler+0x98>
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00001690 	.word	0x00001690
    1294:	20000000 	.word	0x20000000
    1298:	2000000c 	.word	0x2000000c
    129c:	20000004 	.word	0x20000004
    12a0:	2000000c 	.word	0x2000000c
    12a4:	200000e4 	.word	0x200000e4
    12a8:	e000ed00 	.word	0xe000ed00
    12ac:	00000000 	.word	0x00000000
    12b0:	41007000 	.word	0x41007000
    12b4:	41004800 	.word	0x41004800
    12b8:	41004000 	.word	0x41004000
    12bc:	000015dd 	.word	0x000015dd
    12c0:	000012c5 	.word	0x000012c5

000012c4 <main>:
volatile uint16_t pulse_width=0;

volatile bool ready_distance_digital = false ;

int main (void)
{
    12c4:	b510      	push	{r4, lr}
	system_init();
    12c6:	4b05      	ldr	r3, [pc, #20]	; (12dc <main+0x18>)
    12c8:	4798      	blx	r3
	delay_init();
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <main+0x1c>)
    12cc:	4798      	blx	r3
	config_ds();
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <main+0x20>)
    12d0:	4798      	blx	r3
	init_dac();
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <main+0x24>)
    12d4:	4798      	blx	r3
	
	while(1)
	{
		//test();
		convert_digital();
    12d6:	4c05      	ldr	r4, [pc, #20]	; (12ec <main+0x28>)
    12d8:	47a0      	blx	r4
    12da:	e7fd      	b.n	12d8 <main+0x14>
    12dc:	000011c5 	.word	0x000011c5
    12e0:	00000b51 	.word	0x00000b51
    12e4:	00000a55 	.word	0x00000a55
    12e8:	0000083d 	.word	0x0000083d
    12ec:	000003fd 	.word	0x000003fd

000012f0 <__udivsi3>:
    12f0:	2200      	movs	r2, #0
    12f2:	0843      	lsrs	r3, r0, #1
    12f4:	428b      	cmp	r3, r1
    12f6:	d374      	bcc.n	13e2 <__udivsi3+0xf2>
    12f8:	0903      	lsrs	r3, r0, #4
    12fa:	428b      	cmp	r3, r1
    12fc:	d35f      	bcc.n	13be <__udivsi3+0xce>
    12fe:	0a03      	lsrs	r3, r0, #8
    1300:	428b      	cmp	r3, r1
    1302:	d344      	bcc.n	138e <__udivsi3+0x9e>
    1304:	0b03      	lsrs	r3, r0, #12
    1306:	428b      	cmp	r3, r1
    1308:	d328      	bcc.n	135c <__udivsi3+0x6c>
    130a:	0c03      	lsrs	r3, r0, #16
    130c:	428b      	cmp	r3, r1
    130e:	d30d      	bcc.n	132c <__udivsi3+0x3c>
    1310:	22ff      	movs	r2, #255	; 0xff
    1312:	0209      	lsls	r1, r1, #8
    1314:	ba12      	rev	r2, r2
    1316:	0c03      	lsrs	r3, r0, #16
    1318:	428b      	cmp	r3, r1
    131a:	d302      	bcc.n	1322 <__udivsi3+0x32>
    131c:	1212      	asrs	r2, r2, #8
    131e:	0209      	lsls	r1, r1, #8
    1320:	d065      	beq.n	13ee <__udivsi3+0xfe>
    1322:	0b03      	lsrs	r3, r0, #12
    1324:	428b      	cmp	r3, r1
    1326:	d319      	bcc.n	135c <__udivsi3+0x6c>
    1328:	e000      	b.n	132c <__udivsi3+0x3c>
    132a:	0a09      	lsrs	r1, r1, #8
    132c:	0bc3      	lsrs	r3, r0, #15
    132e:	428b      	cmp	r3, r1
    1330:	d301      	bcc.n	1336 <__udivsi3+0x46>
    1332:	03cb      	lsls	r3, r1, #15
    1334:	1ac0      	subs	r0, r0, r3
    1336:	4152      	adcs	r2, r2
    1338:	0b83      	lsrs	r3, r0, #14
    133a:	428b      	cmp	r3, r1
    133c:	d301      	bcc.n	1342 <__udivsi3+0x52>
    133e:	038b      	lsls	r3, r1, #14
    1340:	1ac0      	subs	r0, r0, r3
    1342:	4152      	adcs	r2, r2
    1344:	0b43      	lsrs	r3, r0, #13
    1346:	428b      	cmp	r3, r1
    1348:	d301      	bcc.n	134e <__udivsi3+0x5e>
    134a:	034b      	lsls	r3, r1, #13
    134c:	1ac0      	subs	r0, r0, r3
    134e:	4152      	adcs	r2, r2
    1350:	0b03      	lsrs	r3, r0, #12
    1352:	428b      	cmp	r3, r1
    1354:	d301      	bcc.n	135a <__udivsi3+0x6a>
    1356:	030b      	lsls	r3, r1, #12
    1358:	1ac0      	subs	r0, r0, r3
    135a:	4152      	adcs	r2, r2
    135c:	0ac3      	lsrs	r3, r0, #11
    135e:	428b      	cmp	r3, r1
    1360:	d301      	bcc.n	1366 <__udivsi3+0x76>
    1362:	02cb      	lsls	r3, r1, #11
    1364:	1ac0      	subs	r0, r0, r3
    1366:	4152      	adcs	r2, r2
    1368:	0a83      	lsrs	r3, r0, #10
    136a:	428b      	cmp	r3, r1
    136c:	d301      	bcc.n	1372 <__udivsi3+0x82>
    136e:	028b      	lsls	r3, r1, #10
    1370:	1ac0      	subs	r0, r0, r3
    1372:	4152      	adcs	r2, r2
    1374:	0a43      	lsrs	r3, r0, #9
    1376:	428b      	cmp	r3, r1
    1378:	d301      	bcc.n	137e <__udivsi3+0x8e>
    137a:	024b      	lsls	r3, r1, #9
    137c:	1ac0      	subs	r0, r0, r3
    137e:	4152      	adcs	r2, r2
    1380:	0a03      	lsrs	r3, r0, #8
    1382:	428b      	cmp	r3, r1
    1384:	d301      	bcc.n	138a <__udivsi3+0x9a>
    1386:	020b      	lsls	r3, r1, #8
    1388:	1ac0      	subs	r0, r0, r3
    138a:	4152      	adcs	r2, r2
    138c:	d2cd      	bcs.n	132a <__udivsi3+0x3a>
    138e:	09c3      	lsrs	r3, r0, #7
    1390:	428b      	cmp	r3, r1
    1392:	d301      	bcc.n	1398 <__udivsi3+0xa8>
    1394:	01cb      	lsls	r3, r1, #7
    1396:	1ac0      	subs	r0, r0, r3
    1398:	4152      	adcs	r2, r2
    139a:	0983      	lsrs	r3, r0, #6
    139c:	428b      	cmp	r3, r1
    139e:	d301      	bcc.n	13a4 <__udivsi3+0xb4>
    13a0:	018b      	lsls	r3, r1, #6
    13a2:	1ac0      	subs	r0, r0, r3
    13a4:	4152      	adcs	r2, r2
    13a6:	0943      	lsrs	r3, r0, #5
    13a8:	428b      	cmp	r3, r1
    13aa:	d301      	bcc.n	13b0 <__udivsi3+0xc0>
    13ac:	014b      	lsls	r3, r1, #5
    13ae:	1ac0      	subs	r0, r0, r3
    13b0:	4152      	adcs	r2, r2
    13b2:	0903      	lsrs	r3, r0, #4
    13b4:	428b      	cmp	r3, r1
    13b6:	d301      	bcc.n	13bc <__udivsi3+0xcc>
    13b8:	010b      	lsls	r3, r1, #4
    13ba:	1ac0      	subs	r0, r0, r3
    13bc:	4152      	adcs	r2, r2
    13be:	08c3      	lsrs	r3, r0, #3
    13c0:	428b      	cmp	r3, r1
    13c2:	d301      	bcc.n	13c8 <__udivsi3+0xd8>
    13c4:	00cb      	lsls	r3, r1, #3
    13c6:	1ac0      	subs	r0, r0, r3
    13c8:	4152      	adcs	r2, r2
    13ca:	0883      	lsrs	r3, r0, #2
    13cc:	428b      	cmp	r3, r1
    13ce:	d301      	bcc.n	13d4 <__udivsi3+0xe4>
    13d0:	008b      	lsls	r3, r1, #2
    13d2:	1ac0      	subs	r0, r0, r3
    13d4:	4152      	adcs	r2, r2
    13d6:	0843      	lsrs	r3, r0, #1
    13d8:	428b      	cmp	r3, r1
    13da:	d301      	bcc.n	13e0 <__udivsi3+0xf0>
    13dc:	004b      	lsls	r3, r1, #1
    13de:	1ac0      	subs	r0, r0, r3
    13e0:	4152      	adcs	r2, r2
    13e2:	1a41      	subs	r1, r0, r1
    13e4:	d200      	bcs.n	13e8 <__udivsi3+0xf8>
    13e6:	4601      	mov	r1, r0
    13e8:	4152      	adcs	r2, r2
    13ea:	4610      	mov	r0, r2
    13ec:	4770      	bx	lr
    13ee:	e7ff      	b.n	13f0 <__udivsi3+0x100>
    13f0:	b501      	push	{r0, lr}
    13f2:	2000      	movs	r0, #0
    13f4:	f000 f8f0 	bl	15d8 <__aeabi_idiv0>
    13f8:	bd02      	pop	{r1, pc}
    13fa:	46c0      	nop			; (mov r8, r8)

000013fc <__aeabi_uidivmod>:
    13fc:	2900      	cmp	r1, #0
    13fe:	d0f7      	beq.n	13f0 <__udivsi3+0x100>
    1400:	e776      	b.n	12f0 <__udivsi3>
    1402:	4770      	bx	lr

00001404 <__divsi3>:
    1404:	4603      	mov	r3, r0
    1406:	430b      	orrs	r3, r1
    1408:	d47f      	bmi.n	150a <__divsi3+0x106>
    140a:	2200      	movs	r2, #0
    140c:	0843      	lsrs	r3, r0, #1
    140e:	428b      	cmp	r3, r1
    1410:	d374      	bcc.n	14fc <__divsi3+0xf8>
    1412:	0903      	lsrs	r3, r0, #4
    1414:	428b      	cmp	r3, r1
    1416:	d35f      	bcc.n	14d8 <__divsi3+0xd4>
    1418:	0a03      	lsrs	r3, r0, #8
    141a:	428b      	cmp	r3, r1
    141c:	d344      	bcc.n	14a8 <__divsi3+0xa4>
    141e:	0b03      	lsrs	r3, r0, #12
    1420:	428b      	cmp	r3, r1
    1422:	d328      	bcc.n	1476 <__divsi3+0x72>
    1424:	0c03      	lsrs	r3, r0, #16
    1426:	428b      	cmp	r3, r1
    1428:	d30d      	bcc.n	1446 <__divsi3+0x42>
    142a:	22ff      	movs	r2, #255	; 0xff
    142c:	0209      	lsls	r1, r1, #8
    142e:	ba12      	rev	r2, r2
    1430:	0c03      	lsrs	r3, r0, #16
    1432:	428b      	cmp	r3, r1
    1434:	d302      	bcc.n	143c <__divsi3+0x38>
    1436:	1212      	asrs	r2, r2, #8
    1438:	0209      	lsls	r1, r1, #8
    143a:	d065      	beq.n	1508 <__divsi3+0x104>
    143c:	0b03      	lsrs	r3, r0, #12
    143e:	428b      	cmp	r3, r1
    1440:	d319      	bcc.n	1476 <__divsi3+0x72>
    1442:	e000      	b.n	1446 <__divsi3+0x42>
    1444:	0a09      	lsrs	r1, r1, #8
    1446:	0bc3      	lsrs	r3, r0, #15
    1448:	428b      	cmp	r3, r1
    144a:	d301      	bcc.n	1450 <__divsi3+0x4c>
    144c:	03cb      	lsls	r3, r1, #15
    144e:	1ac0      	subs	r0, r0, r3
    1450:	4152      	adcs	r2, r2
    1452:	0b83      	lsrs	r3, r0, #14
    1454:	428b      	cmp	r3, r1
    1456:	d301      	bcc.n	145c <__divsi3+0x58>
    1458:	038b      	lsls	r3, r1, #14
    145a:	1ac0      	subs	r0, r0, r3
    145c:	4152      	adcs	r2, r2
    145e:	0b43      	lsrs	r3, r0, #13
    1460:	428b      	cmp	r3, r1
    1462:	d301      	bcc.n	1468 <__divsi3+0x64>
    1464:	034b      	lsls	r3, r1, #13
    1466:	1ac0      	subs	r0, r0, r3
    1468:	4152      	adcs	r2, r2
    146a:	0b03      	lsrs	r3, r0, #12
    146c:	428b      	cmp	r3, r1
    146e:	d301      	bcc.n	1474 <__divsi3+0x70>
    1470:	030b      	lsls	r3, r1, #12
    1472:	1ac0      	subs	r0, r0, r3
    1474:	4152      	adcs	r2, r2
    1476:	0ac3      	lsrs	r3, r0, #11
    1478:	428b      	cmp	r3, r1
    147a:	d301      	bcc.n	1480 <__divsi3+0x7c>
    147c:	02cb      	lsls	r3, r1, #11
    147e:	1ac0      	subs	r0, r0, r3
    1480:	4152      	adcs	r2, r2
    1482:	0a83      	lsrs	r3, r0, #10
    1484:	428b      	cmp	r3, r1
    1486:	d301      	bcc.n	148c <__divsi3+0x88>
    1488:	028b      	lsls	r3, r1, #10
    148a:	1ac0      	subs	r0, r0, r3
    148c:	4152      	adcs	r2, r2
    148e:	0a43      	lsrs	r3, r0, #9
    1490:	428b      	cmp	r3, r1
    1492:	d301      	bcc.n	1498 <__divsi3+0x94>
    1494:	024b      	lsls	r3, r1, #9
    1496:	1ac0      	subs	r0, r0, r3
    1498:	4152      	adcs	r2, r2
    149a:	0a03      	lsrs	r3, r0, #8
    149c:	428b      	cmp	r3, r1
    149e:	d301      	bcc.n	14a4 <__divsi3+0xa0>
    14a0:	020b      	lsls	r3, r1, #8
    14a2:	1ac0      	subs	r0, r0, r3
    14a4:	4152      	adcs	r2, r2
    14a6:	d2cd      	bcs.n	1444 <__divsi3+0x40>
    14a8:	09c3      	lsrs	r3, r0, #7
    14aa:	428b      	cmp	r3, r1
    14ac:	d301      	bcc.n	14b2 <__divsi3+0xae>
    14ae:	01cb      	lsls	r3, r1, #7
    14b0:	1ac0      	subs	r0, r0, r3
    14b2:	4152      	adcs	r2, r2
    14b4:	0983      	lsrs	r3, r0, #6
    14b6:	428b      	cmp	r3, r1
    14b8:	d301      	bcc.n	14be <__divsi3+0xba>
    14ba:	018b      	lsls	r3, r1, #6
    14bc:	1ac0      	subs	r0, r0, r3
    14be:	4152      	adcs	r2, r2
    14c0:	0943      	lsrs	r3, r0, #5
    14c2:	428b      	cmp	r3, r1
    14c4:	d301      	bcc.n	14ca <__divsi3+0xc6>
    14c6:	014b      	lsls	r3, r1, #5
    14c8:	1ac0      	subs	r0, r0, r3
    14ca:	4152      	adcs	r2, r2
    14cc:	0903      	lsrs	r3, r0, #4
    14ce:	428b      	cmp	r3, r1
    14d0:	d301      	bcc.n	14d6 <__divsi3+0xd2>
    14d2:	010b      	lsls	r3, r1, #4
    14d4:	1ac0      	subs	r0, r0, r3
    14d6:	4152      	adcs	r2, r2
    14d8:	08c3      	lsrs	r3, r0, #3
    14da:	428b      	cmp	r3, r1
    14dc:	d301      	bcc.n	14e2 <__divsi3+0xde>
    14de:	00cb      	lsls	r3, r1, #3
    14e0:	1ac0      	subs	r0, r0, r3
    14e2:	4152      	adcs	r2, r2
    14e4:	0883      	lsrs	r3, r0, #2
    14e6:	428b      	cmp	r3, r1
    14e8:	d301      	bcc.n	14ee <__divsi3+0xea>
    14ea:	008b      	lsls	r3, r1, #2
    14ec:	1ac0      	subs	r0, r0, r3
    14ee:	4152      	adcs	r2, r2
    14f0:	0843      	lsrs	r3, r0, #1
    14f2:	428b      	cmp	r3, r1
    14f4:	d301      	bcc.n	14fa <__divsi3+0xf6>
    14f6:	004b      	lsls	r3, r1, #1
    14f8:	1ac0      	subs	r0, r0, r3
    14fa:	4152      	adcs	r2, r2
    14fc:	1a41      	subs	r1, r0, r1
    14fe:	d200      	bcs.n	1502 <__divsi3+0xfe>
    1500:	4601      	mov	r1, r0
    1502:	4152      	adcs	r2, r2
    1504:	4610      	mov	r0, r2
    1506:	4770      	bx	lr
    1508:	e05d      	b.n	15c6 <__divsi3+0x1c2>
    150a:	0fca      	lsrs	r2, r1, #31
    150c:	d000      	beq.n	1510 <__divsi3+0x10c>
    150e:	4249      	negs	r1, r1
    1510:	1003      	asrs	r3, r0, #32
    1512:	d300      	bcc.n	1516 <__divsi3+0x112>
    1514:	4240      	negs	r0, r0
    1516:	4053      	eors	r3, r2
    1518:	2200      	movs	r2, #0
    151a:	469c      	mov	ip, r3
    151c:	0903      	lsrs	r3, r0, #4
    151e:	428b      	cmp	r3, r1
    1520:	d32d      	bcc.n	157e <__divsi3+0x17a>
    1522:	0a03      	lsrs	r3, r0, #8
    1524:	428b      	cmp	r3, r1
    1526:	d312      	bcc.n	154e <__divsi3+0x14a>
    1528:	22fc      	movs	r2, #252	; 0xfc
    152a:	0189      	lsls	r1, r1, #6
    152c:	ba12      	rev	r2, r2
    152e:	0a03      	lsrs	r3, r0, #8
    1530:	428b      	cmp	r3, r1
    1532:	d30c      	bcc.n	154e <__divsi3+0x14a>
    1534:	0189      	lsls	r1, r1, #6
    1536:	1192      	asrs	r2, r2, #6
    1538:	428b      	cmp	r3, r1
    153a:	d308      	bcc.n	154e <__divsi3+0x14a>
    153c:	0189      	lsls	r1, r1, #6
    153e:	1192      	asrs	r2, r2, #6
    1540:	428b      	cmp	r3, r1
    1542:	d304      	bcc.n	154e <__divsi3+0x14a>
    1544:	0189      	lsls	r1, r1, #6
    1546:	d03a      	beq.n	15be <__divsi3+0x1ba>
    1548:	1192      	asrs	r2, r2, #6
    154a:	e000      	b.n	154e <__divsi3+0x14a>
    154c:	0989      	lsrs	r1, r1, #6
    154e:	09c3      	lsrs	r3, r0, #7
    1550:	428b      	cmp	r3, r1
    1552:	d301      	bcc.n	1558 <__divsi3+0x154>
    1554:	01cb      	lsls	r3, r1, #7
    1556:	1ac0      	subs	r0, r0, r3
    1558:	4152      	adcs	r2, r2
    155a:	0983      	lsrs	r3, r0, #6
    155c:	428b      	cmp	r3, r1
    155e:	d301      	bcc.n	1564 <__divsi3+0x160>
    1560:	018b      	lsls	r3, r1, #6
    1562:	1ac0      	subs	r0, r0, r3
    1564:	4152      	adcs	r2, r2
    1566:	0943      	lsrs	r3, r0, #5
    1568:	428b      	cmp	r3, r1
    156a:	d301      	bcc.n	1570 <__divsi3+0x16c>
    156c:	014b      	lsls	r3, r1, #5
    156e:	1ac0      	subs	r0, r0, r3
    1570:	4152      	adcs	r2, r2
    1572:	0903      	lsrs	r3, r0, #4
    1574:	428b      	cmp	r3, r1
    1576:	d301      	bcc.n	157c <__divsi3+0x178>
    1578:	010b      	lsls	r3, r1, #4
    157a:	1ac0      	subs	r0, r0, r3
    157c:	4152      	adcs	r2, r2
    157e:	08c3      	lsrs	r3, r0, #3
    1580:	428b      	cmp	r3, r1
    1582:	d301      	bcc.n	1588 <__divsi3+0x184>
    1584:	00cb      	lsls	r3, r1, #3
    1586:	1ac0      	subs	r0, r0, r3
    1588:	4152      	adcs	r2, r2
    158a:	0883      	lsrs	r3, r0, #2
    158c:	428b      	cmp	r3, r1
    158e:	d301      	bcc.n	1594 <__divsi3+0x190>
    1590:	008b      	lsls	r3, r1, #2
    1592:	1ac0      	subs	r0, r0, r3
    1594:	4152      	adcs	r2, r2
    1596:	d2d9      	bcs.n	154c <__divsi3+0x148>
    1598:	0843      	lsrs	r3, r0, #1
    159a:	428b      	cmp	r3, r1
    159c:	d301      	bcc.n	15a2 <__divsi3+0x19e>
    159e:	004b      	lsls	r3, r1, #1
    15a0:	1ac0      	subs	r0, r0, r3
    15a2:	4152      	adcs	r2, r2
    15a4:	1a41      	subs	r1, r0, r1
    15a6:	d200      	bcs.n	15aa <__divsi3+0x1a6>
    15a8:	4601      	mov	r1, r0
    15aa:	4663      	mov	r3, ip
    15ac:	4152      	adcs	r2, r2
    15ae:	105b      	asrs	r3, r3, #1
    15b0:	4610      	mov	r0, r2
    15b2:	d301      	bcc.n	15b8 <__divsi3+0x1b4>
    15b4:	4240      	negs	r0, r0
    15b6:	2b00      	cmp	r3, #0
    15b8:	d500      	bpl.n	15bc <__divsi3+0x1b8>
    15ba:	4249      	negs	r1, r1
    15bc:	4770      	bx	lr
    15be:	4663      	mov	r3, ip
    15c0:	105b      	asrs	r3, r3, #1
    15c2:	d300      	bcc.n	15c6 <__divsi3+0x1c2>
    15c4:	4240      	negs	r0, r0
    15c6:	b501      	push	{r0, lr}
    15c8:	2000      	movs	r0, #0
    15ca:	f000 f805 	bl	15d8 <__aeabi_idiv0>
    15ce:	bd02      	pop	{r1, pc}

000015d0 <__aeabi_idivmod>:
    15d0:	2900      	cmp	r1, #0
    15d2:	d0f8      	beq.n	15c6 <__divsi3+0x1c2>
    15d4:	e716      	b.n	1404 <__divsi3>
    15d6:	4770      	bx	lr

000015d8 <__aeabi_idiv0>:
    15d8:	4770      	bx	lr
    15da:	46c0      	nop			; (mov r8, r8)

000015dc <__libc_init_array>:
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	2600      	movs	r6, #0
    15e0:	4d0c      	ldr	r5, [pc, #48]	; (1614 <__libc_init_array+0x38>)
    15e2:	4c0d      	ldr	r4, [pc, #52]	; (1618 <__libc_init_array+0x3c>)
    15e4:	1b64      	subs	r4, r4, r5
    15e6:	10a4      	asrs	r4, r4, #2
    15e8:	42a6      	cmp	r6, r4
    15ea:	d109      	bne.n	1600 <__libc_init_array+0x24>
    15ec:	2600      	movs	r6, #0
    15ee:	f000 f83f 	bl	1670 <_init>
    15f2:	4d0a      	ldr	r5, [pc, #40]	; (161c <__libc_init_array+0x40>)
    15f4:	4c0a      	ldr	r4, [pc, #40]	; (1620 <__libc_init_array+0x44>)
    15f6:	1b64      	subs	r4, r4, r5
    15f8:	10a4      	asrs	r4, r4, #2
    15fa:	42a6      	cmp	r6, r4
    15fc:	d105      	bne.n	160a <__libc_init_array+0x2e>
    15fe:	bd70      	pop	{r4, r5, r6, pc}
    1600:	00b3      	lsls	r3, r6, #2
    1602:	58eb      	ldr	r3, [r5, r3]
    1604:	4798      	blx	r3
    1606:	3601      	adds	r6, #1
    1608:	e7ee      	b.n	15e8 <__libc_init_array+0xc>
    160a:	00b3      	lsls	r3, r6, #2
    160c:	58eb      	ldr	r3, [r5, r3]
    160e:	4798      	blx	r3
    1610:	3601      	adds	r6, #1
    1612:	e7f2      	b.n	15fa <__libc_init_array+0x1e>
    1614:	0000167c 	.word	0x0000167c
    1618:	0000167c 	.word	0x0000167c
    161c:	0000167c 	.word	0x0000167c
    1620:	00001680 	.word	0x00001680

00001624 <tc_interrupt_vectors.11470>:
    1624:	00000e0d 00000c66 00000c62 00000c62     ....f...b...b...
    1634:	00000cc4 00000cc4 00000c7a 00000c6c     ........z...l...
    1644:	00000c80 00000cb2 00000d4c 00000d2c     ........L...,...
    1654:	00000d2c 00000db8 00000d3e 00000d5a     ,.......>...Z...
    1664:	00000d30 00000d68 00000da8              0...h.......

00001670 <_init>:
    1670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1676:	bc08      	pop	{r3}
    1678:	469e      	mov	lr, r3
    167a:	4770      	bx	lr

0000167c <__init_array_start>:
    167c:	000000b5 	.word	0x000000b5

00001680 <_fini>:
    1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1686:	bc08      	pop	{r3}
    1688:	469e      	mov	lr, r3
    168a:	4770      	bx	lr

0000168c <__fini_array_start>:
    168c:	0000008d 	.word	0x0000008d
